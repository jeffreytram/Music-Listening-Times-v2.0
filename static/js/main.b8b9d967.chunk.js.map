{"version":3,"sources":["logic/chart.js","components/Graph.js","components/SearchForm.js","components/SongInfo.js","components/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["datasetLoaded","searchFilter","type","value","dataset","settings","keys","i","filter","d","length","preprocessData","setDatasetBuckets","setDataset","days","dataMap","Map","RawDateTime","ConvertedDateTime","Date","setHours","getHours","toDateString","Time","getMinutes","Day","getDay","yearKey","getFullYear","has","set","yearArr","1","2","3","4","5","6","7","8","9","10","11","12","yearData","get","monthBucket","getMonth","monthID","yearID","ID","push","splice","latestDate","earliestDate","getMilliseconds","setDate","yearListInitialization","setYearList","latestYear","earliestYear","currYear","uniqueYears","finishedLoading","loading","document","getElementById","content","style","display","setup","d3","then","data","examplePreprocessData","exampleYearListInitialization","getNextMonth","month","year","getPrevMonth","width","height","padding","svg","canvas","xAxisG","yAxisG","xScale","yScale","clipGroup","pointGroup","zoom","Graph","props","initializeGraph","attr","classed","append","startDay","endDay","domain","range","line","on","event","mouse","text","scaleExtent","extent","translateExtent","call","transform","zoomed","zx","rescaleX","interpolate","zy","rescaleY","xAxis","ticks","every","tickFormat","yAxis","drawGraph","setClickedPoint","setFilteredDataset","sampleDate","timePeriod","yState","date","firstDay","lastDay","getDate","generateYState","inputData","select","remove","toLocaleString","point","selectAll","pointEnter","enter","merge","opacity","radius","e","exit","drawCanvasBars","updateGraph","filteredData","filterView","categories","indexOf","hiddenOpacity","hiddenRadius","cWidth","node","cHeight","context","getContext","clearRect","rgb","getComputedStyle","body","getPropertyValue","fillStyle","fillRect","state","this","newLoad","id","React","Component","SearchForm","handleChange","setState","target","handleSubmit","preventDefault","setting","onSubmit","list","datalist","placeholder","onChange","className","SongInfo","handleInfoClick","setSearchType","handlePointChange","change","clickedPoint","entireDataset","newID","undefined","leftArrowVisibility","rightArrowVisibility","visibility","Artist","alt","src","onClick","Song","Album","weekday","day","hour","minute","icon","faLongArrowAltLeft","title","faLongArrowAltRight","marginLeft","TimeSettings","setSetting","setDefaultSetting","map","cat","htmlFor","step","min","max","Settings","monthlySettings","yearlySettings","categoriesKey","App","bucket","timeRange","datasetBuckets","prevState","filteredDataset","dayFilter","mon","tue","wed","thu","fri","sat","sun","setDatalist","years","yearList","artistSet","Set","songSet","albumSet","forEach","add","ignoreCaseSort","a","b","toLowerCase","localeCompare","artistList","Array","from","sort","songList","albumList","artist","song","album","viewType","toggleDarkTheme","isDarkTheme","datalistSetting","toggleDayCheckbox","toggledDay","name","newDataset","weekList","daySelectedCount","concat","filterDay","handleFileUpload","file","files","fileReader","FileReader","addEventListener","uploadedDataSetup","result","readAsText","setTimePeriod","period","category","timeSetting","settingIndex","newSettings","defaultSettings","getElementsByTagName","SearchFilter","faSearch","DayButton","abbrevation","fullName","displayName","checked","DayFilter","faFilter","handleMonthChange","newMonth","parseInt","handleYearChange","newYear","DateNavigation","nextDisabled","prevDisabled","abbrev","nextMonthDate","prevMonthDate","faCaretUp","prevMonth","prevYear","handlePrevPeriodChange","faCaretDown","nextMonth","nextMonthYear","handleNextPeriodChange","TimePeriodButton","faUpload","accept","faMoon","faSun","faRedoAlt","flip","option","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uRAEIA,EAAgB,GAoCb,SAASC,EAAaC,EAAMC,EAAOC,GAGxC,IAFA,IAAMC,EAAW,CAAC,OAAQ,SAAU,SAC9BC,EAAO,CAAC,OAAQ,SAAU,SAFiB,WAGxCC,GACP,GAAIL,IAASG,EAASE,GACpB,MAAM,CAAN,EAAOH,EAAQI,QAAO,SAAAC,GAAC,OAAIA,EAAEH,EAAKC,MAAQJ,OAFrCI,EAAI,EAAGA,EAAIF,EAASK,OAAQH,IAAK,CAAC,IAAD,IAAjCA,GAAiC,kCAM1C,MAAO,GAQF,IA8CDI,EAAiB,SAACP,EAASQ,EAAmBC,GAMlD,IAJA,IAAMC,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE1EC,EAAU,IAAIC,IAEXT,EAAI,EAAGA,EAAIH,EAAQM,OAAQH,IAAK,CACvC,IAAME,EAAIL,EAAQG,GAGlB,GAAKE,EAAEQ,YAAP,CAOAR,EAAES,kBAAoB,IAAIC,KAAKV,EAAEQ,aAKjCR,EAAES,kBAAkBE,SAASX,EAAES,kBAAkBG,WAAa,GAC9DZ,EAAEU,KAAO,IAAIA,KAAKV,EAAES,kBAAkBI,gBACtCb,EAAEc,MAAO,IAAIJ,MAAOC,SAASX,EAAES,kBAAkBG,WAAYZ,EAAES,kBAAkBM,cACjFf,EAAEgB,IAAMX,EAAKL,EAAES,kBAAkBQ,UAEjC,IAAMC,EAAWlB,EAAEU,KAAKS,cACnBb,EAAQc,IAAIF,IACfZ,EAAQe,IAAIH,EAAS,CAAEI,QAAS,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,KAGzH,IAAMC,EAAW7B,EAAQ8B,IAAIlB,GACvBmB,EAAcF,EAASnC,EAAEU,KAAK4B,WAAa,GAEjDtC,EAAEuC,QAAUF,EAAYpC,OACxBD,EAAEwC,OAASL,EAASb,QAAQrB,OAC5BD,EAAEyC,GAAK3C,EAEPuC,EAAYK,KAAK1C,GACjBmC,EAASb,QAAQoB,KAAK1C,QA5BpBL,EAAQgD,OAAO7C,EAAG,GAClBA,IA+BJ,IAAM8C,EAAa,IAAIlC,KAAJ,UAAYf,EAAQ,GAAGe,KAAK4B,WAAa,EAAzC,cAAgD3C,EAAQ,GAAGe,KAAKS,gBAC7E0B,EAAe,IAAInC,KAAKf,EAAQA,EAAQM,OAAS,GAAGS,MAE1DkC,EAAWjC,SAAS,EAAG,EAAG,EAAGiC,EAAWE,kBAAoB,GAC5DD,EAAaE,QAAQ,GAErB5C,EAAkBG,EAASX,EAAS,CAACkD,EAAcD,IAEnDxC,EAAWwC,EAAWN,WAAa,EAAGM,EAAWzB,gBAiB7C6B,EAAyB,SAACrD,EAASsD,GAOvC,IANA,IAAMC,EAAavD,EAAQ,GAAGe,KAAKS,cAC7BgC,EAAexD,EAAQA,EAAQM,OAAS,GAAGS,KAAKS,cAElDiC,EAAWF,EAEXG,EAAc,GACXD,GAAYD,GACjBE,EAAYX,KAAKU,GACjBA,GAAY,EAEdH,EAAYI,IAMRC,EAAkB,WAEtB,IAAMC,EAAUC,SAASC,eAAe,WAClCC,EAAUF,SAASC,eAAe,qBAExCF,EAAQI,MAAMC,QAAU,OACxBF,EAAQC,MAAMC,QAAU,SASbC,EAAQ,SAAC1D,EAAmBC,EAAY6C,GA1HnD1D,EAAgBuE,IAAO,mDAAmDC,MAAK,SAACC,GAC9E,OAAOA,KASmB,SAAC7D,EAAmBC,GAChDb,EAAcwE,MAAK,SAAApE,GACjBO,EAAeP,EAASQ,EAAmBC,MAgH7C6D,CAAsB9D,EAAmBC,GA5CL,SAAC6C,GACrC1D,EAAcwE,MAAK,SAAApE,GACjBqD,EAAuBrD,EAASsD,MA2ClCiB,CAA8BjB,GAE9BK,KAgBWa,EAAe,SAACC,EAAOC,GAElC,OAAO,IAAI3D,KAAK2D,EAAMD,EAAO,IASlBE,EAAe,SAACF,EAAOC,GAGlC,OAAO,IAAI3D,KAAK2D,EAAMD,EAAQ,EAAG,ICzO7BG,EAAQ,IACRC,EAAS,IACTC,EAAkB,GAAlBA,EAA6B,GAA7BA,EAAsC,GAAtCA,EAAgD,GAElDC,EAAM,GACNC,EAAS,GAETC,EAAS,GACTC,EAAS,GAETC,EAAS,GACTC,EAAS,GAETC,EAAY,GACZC,EAAa,GAEbC,EAAO,GAEUC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAuBRC,gBAAkB,WAGhBX,EAAMZ,IAAU,eACbwB,KAAK,QAASf,GACde,KAAK,SAAUd,GACfc,KAAK,UAAW,CAAC,EAAG,EAAGf,EAAOC,IAC9Bc,KAAK,sBAAuB,iBAC5BC,QAAQ,eAAe,GAE1BZ,EAASb,IAAU,WAChBwB,KAAK,QAASf,GACde,KAAK,SAAU,IAGlBV,EAASF,EAAIc,OAAO,KACjBF,KAAK,QAAS,UACdA,KAAK,YAFC,uBAE4Bd,EAASC,EAFrC,MAKTI,EAASH,EAAIc,OAAO,KACjBF,KAAK,QAAS,UACdA,KAAK,YAFC,oBAEyBb,EAFzB,SAIT,IAAMgB,EAAW,IAAI/E,KACrB+E,EAAS9E,SAAS,EAAG,EAAG,EAAG,GAC3B,IAAM+E,EAAS,IAAIhF,KACnBgF,EAAO/E,SAAS,GAAI,GAAI,GAAI,IAG5BmE,EAAShB,MACN6B,OAAO,CAACF,EAAUC,IAClBE,MAAM,CAACnB,EAAcF,EAAQE,IAEhCM,EAASjB,MACN8B,MAAM,CAACnB,EAAaD,EAASC,IAGhC,IAAIoB,EAAOnB,EAAIc,OAAO,QACnB7B,MAAM,SAAU,yBAChBA,MAAM,eAAgB,OACtBA,MAAM,mBAAoB,KAE7Be,EACGoB,GAAG,aAAa,SAAUC,GACzB,IAAIC,EAAQlC,IAAWiC,GACvBF,EAAKP,KAAK,KAAK,WAGb,IAAItF,EAAI,IAAMgG,EAAM,GAAK,MAEzB,OADAhG,GAAK,IAAMgG,EAAM,GAAZ,WAAqBxB,EAASC,SAItCqB,GAAG,aAAa,WACfD,EAAKlC,MAAM,UAAW,OAEvBmC,GAAG,YAAY,WACdD,EAAKlC,MAAM,UAAW,MAI1Be,EAAIc,OAAO,QACRF,KAAK,QAAS,WACdA,KAAK,cAAe,UACpBA,KAAK,YAHR,qBAGmCb,EAAeF,EAAQE,GAAiB,EAH3E,aAGiFD,EAASC,EAAe,EAHzG,MAIGwB,KAAK,0BAGRvB,EAAIc,OAAO,QACRF,KAAK,QAAS,WACdA,KAAK,cAAe,UACpBA,KAAK,YAHR,oBAGkCb,EAAe,EAHjD,cAGwDA,EAAcD,EAASC,GAAgB,EAH/F,kBAIGwB,KAAK,QAGRjB,EAAYN,EAAIc,OAAO,KACpBF,KAAK,YAAa,cACrBL,EAAaD,EAAUQ,OAAO,KAG9Bd,EAAIc,OAAO,QACRA,OAAO,YACPF,KAAK,KAAM,QACXE,OAAO,QACPF,KAAK,QAASf,EAAQE,EAAeA,GACrCa,KAAK,SAAUd,EAASC,EAAcA,EAAe,IACrDa,KAAK,IAAKb,GACVa,KAAK,IAAKb,EAAc,GAE3BS,EAAOpB,MACJoC,YAAY,CAAC,EAAG,KAChBC,OAAO,CAAC,CAAC1B,EAAcA,GAAc,CAACF,EAAQE,EAAeD,EAASC,KACtE2B,gBAAgB,CAAC,CAAC3B,EAAcA,GAAc,CAACF,EAAQE,EAAeD,EAASC,KAElFC,EAAI2B,KAAKnB,GAAMmB,KAAKnB,EAAKoB,UAAWxC,MAvHnB,EA2HnByC,OAAS,YAAoB,IAAjBD,EAAgB,EAAhBA,UAEJE,EAAKF,EAAUG,SAAS3B,GAAQ4B,YAAY5C,KAC5C6C,EAAKL,EAAUM,SAAS7B,GAAQ2B,YAAY5C,KAGlDmB,EAAWK,KAAK,YAAagB,GAE7B,IAAMO,EAAQ/C,IAAc0C,GACzBM,MAAMhD,IAAYiD,MAAM,IACxBC,WAAWlD,IAAc,UAEtBmD,EAAQnD,IAAY6C,GAE1B/B,EAAOyB,KAAKQ,GACZhC,EAAOwB,KAAKY,IA1IK,EAgJnBC,UAAY,WAAM,MAEwE,EAAK9B,MAArFpB,EAFQ,EAERA,KAAMmD,EAFE,EAEFA,gBAAiBC,EAFf,EAEeA,mBAAoBC,EAFnC,EAEmCA,WAAYC,EAF/C,EAE+CA,WAAY1H,EAF3D,EAE2DA,SAOrE2H,EDvKH,SAAwBC,EAAMF,GACnC,GAAmB,YAAfA,EAA0B,CAE5B,IAAMjD,EAAOmD,EAAKrG,cACZiD,EAAQoD,EAAKlF,WACbmF,EAAW,IAAI/G,KAAK2D,EAAMD,EAAO,GAGvC,MADe,CADC,IAAI1D,KAAK2D,EAAMD,EAAQ,EAAG,GACjBqD,GAEpB,GAAmB,WAAfH,EAAyB,CAElC,IAAMjD,EAAOmD,EAAKrG,cACZsG,EAAW,IAAI/G,KAAJ,cAAgB2D,IAC3BqD,EAAU,IAAIhH,KAAJ,cAAgB2D,EAAO,IAGvC,OAFAqD,EAAQ3E,QAAQ2E,EAAQC,UAAY,GACrB,CAACD,EAASD,ICwJVG,CADKP,EACuBC,GAG3CvC,EAAOY,OAAO4B,GAGd,IAAIV,EAAQ/C,IAAcgB,GACvBgC,MAAMhD,IAAYiD,MAAM,IACxBC,WAAWlD,IAAc,UAGxBmD,EAAQnD,IAAYiB,GAExBH,EAAOyB,KAAKQ,GACZhC,EAAOwB,KAAKY,GAEZ,IAAMY,EAAa7D,GAAe,GAElCU,EAAIoD,OAAO,oBAAoBC,SACN,IAArBF,EAAU5H,QAGZyE,EAAIc,OAAO,QACRF,KAAK,QAAS,mBACdA,KAAK,cAAe,UACpBA,KAAK,YAHR,qBAGmCb,EAAeF,EAAQE,GAAiB,EAH3E,cAGkFD,EAASC,EAAeA,GAAe,EAHzH,MAIGwB,KAJH,sBAIuBoB,EAAWW,eAAe,UAAW,CAAE5D,MAAO,OAAQC,KAAM,cAMrF,IAAI4D,EAAQhD,EAAWiD,UAAU,UAC9BlE,KAAK6D,GAAW,SAAA7H,GAAC,OAAIA,EAAES,qBAEtB0H,EAAaF,EAAMG,QACpB5C,OAAO,KACPF,KAAK,QAAS,SAEjB6C,EAAWE,MAAMJ,GACd3C,KAAK,aAAa,SAAAtF,GAGjB,MAAO,aAAe,CAFb8E,EAAO9E,EAAEc,MACTiE,EAAO/E,EAAEU,OACe,OAGrC,IAAM4H,EAAU1I,EAAS,GAAG,GACtB2I,EAAS3I,EAAS,GAAG,GAG3BuI,EAAW3C,OAAO,UACfF,KAAK,IAAKiD,GACV5E,MAAM,UAAW2E,GACjBxC,GAAG,SAAS,SAAU0C,EAAGxI,GACxBmH,EAAgBnH,EAAEyC,IAClB2E,EAAmB,CAACpH,GAAI,aAI5BiI,EAAMQ,OAAOV,SAEb,EAAKW,eAAeb,GAEpB3C,EAAKY,GAAG,QAAQ,SAACC,GAAD,OAAW,EAAKQ,OAAOR,OAxNtB,EA8NnB4C,YAAc,WAAO,IAAD,EAC6B,EAAKvD,MAA5CwD,EADU,EACVA,aAAcC,EADJ,EACIA,WAAYjJ,EADhB,EACgBA,SAE5BkJ,EAAa,CAAC,OAAQ,MAAO,SAAU,SAAU,UAEjDR,EAAU1I,EAASkJ,EAAWC,QAAQF,IAAa,GACnDN,EAAS3I,EAASkJ,EAAWC,QAAQF,IAAa,GAClDG,EAAgBpJ,EAASkJ,EAAWC,QAAQ,WAAW,GACvDE,EAAerJ,EAASkJ,EAAWC,QAAQ,WAAW,GAGxDd,EAAQhD,EAAWiD,UAAU,UAC9BlE,KAAK4E,GAAc,SAAA5I,GAAC,OAAIA,EAAES,qBAE7BwH,EAAMH,OAAO,UACVxC,KAAK,IAAKiD,GACV5E,MAAM,UAAW2E,GAGpBL,EAAMQ,OACHX,OAAO,UACPxC,KAAK,IAAK2D,GACVtF,MAAM,UAAWqF,GAEpB,EAAKN,eAAeE,GAEpB1D,EAAKY,GAAG,QAAQ,SAACC,GAAD,OAAW,EAAKQ,OAAOR,OAxPtB,EA+PnB2C,eAAiB,SAAC1E,GAChB,IAAMkF,EAASvE,EAAOwE,OAAO5E,MACvB6E,EAAUzE,EAAOwE,OAAO3E,OAG1B6E,EAAU1E,EAAOwE,OAAOG,WAAW,MAGvCD,EAAQE,UAAU,EAAG,EAAGL,EAAQE,GAKhC,IAHA,IACMI,EADQC,iBAAiBjG,SAASkG,MACtBC,iBAAiB,iBAE1B7J,EAAI,EAAGA,EAAIkE,EAAK/D,OAAQH,IAAK,CACpC,IAAIE,EAAIgE,EAAKlE,GAGbuJ,EAAQO,UAAR,eAA4BJ,EAA5B,UACAH,EAAQQ,SAAS/E,EAAO9E,EAAEc,MAAO,EAAG,EAAGsI,KA/QzC,EAAKU,MAAQ,GAFI,E,gEAOjBC,KAAK1E,oB,2CAIe0E,KAAK3E,MAAjB4E,QAGND,KAAK7C,YAGL6C,KAAKpB,gB,+BAqQP,OAAO,gCACL,wBAAQsB,GAAG,WACX,qBAAKA,GAAG,sB,GAzRqBC,IAAMC,WCnBpBC,E,kDACnB,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IAMRiF,aAAe,SAACtE,GACd,EAAKuE,UAAS,iBAAO,CACnB5K,MAAOqG,EAAMwE,OAAO7K,WATL,EAanB8K,aAAe,SAACzE,GACdA,EAAM0E,iBADkB,MAGsB,EAAKrF,MAA3CsF,EAHgB,EAGhBA,QAAStD,EAHO,EAGPA,mBAAoBpD,EAHb,EAGaA,KAErCoD,EADwB5H,EAAakL,EAAS,EAAKZ,MAAMpK,MAAOsE,GAC5B,WAhBpC,EAAK8F,MAAQ,CACXpK,MAAO,IAHQ,E,qDAsBjB,OACE,uBAAMiL,SAAUZ,KAAKS,aAArB,UACE,uBACE/K,KAAK,OACLwK,GAAG,eACHW,KAAMb,KAAK3E,MAAMyF,SACjBC,YAAY,gBACZC,SAAUhB,KAAKM,aACf3K,MAAOqK,KAAKD,MAAMpK,QAEpB,uBAAOD,KAAK,SAASuL,UAAU,SAASf,GAAG,gBAAgBvK,MAAM,kB,GAjCjCwK,IAAMC,WCEzBc,E,kDACnB,WAAY7F,GAAQ,IAAD,8BACjB,cAAMA,IAKR8F,gBAAkB,SAACzL,EAAMC,GAAW,IAAD,EACmB,EAAK0F,MAAjDgC,EADyB,EACzBA,mBAAoB+D,EADK,EACLA,cAAenH,EADV,EACUA,KAG3CmH,EAAc1L,GAId2H,EADwB5H,EAAaC,EAAMC,EAAOsE,GACd,WAdnB,EAiBnBoH,kBAAoB,SAACC,GAAW,MAE+C,EAAKjG,MAA1EgC,EAFsB,EAEtBA,mBAAoBD,EAFE,EAEFA,gBAAiBmE,EAFf,EAEeA,aAAcC,EAF7B,EAE6BA,cAErDC,EAAQF,EAAeD,EAEzBG,GAAS,GAAKA,EAAQD,EAActL,SAEtCmH,EAAmB,CAACmE,EAAcC,IAAS,UAC3CrE,EAAgBqE,KAxBlB,EAAK1B,MAAQ,GAFI,E,qDA+BT,IAAD,SACmDC,KAAK3E,MAAvDkG,EADD,EACCA,aAActH,EADf,EACeA,KAAMuH,EADrB,EACqBA,cAAejE,EADpC,EACoCA,WAEvC3H,EAAUqE,OACDyH,IAATzH,IAAoBrE,EAAU,IAElC,IAAIsI,EAAQsD,EAAcD,QACZG,IAAVxD,IAAqBA,EAAQ,IAEjC,IAEIyD,EACAC,EAHEC,OAA+BH,IAAjBxD,EAAM4D,OAAwB,SAAW,GAa7D,MARmB,YAAfvE,GACFoE,EAAuBzD,EAAM1F,QAAU5C,EAAQM,OAAS,EAAK,GAAK,iBAClE0L,EAAwB1D,EAAM1F,QAAU,EAAK,GAAK,kBAC1B,WAAf+E,IACToE,EAAuBzD,EAAMzF,OAAS7C,EAAQM,OAAS,EAAK,GAAK,iBACjE0L,EAAwB1D,EAAMzF,OAAS,EAAK,GAAK,kBAIjD,sBAAKwI,UAAS,yBAAoBY,GAAlC,UACE,qBAAK3B,GAAG,YAAY6B,IAAI,cACtBC,IAAI,oFACN,sBAAKf,UAAU,OAAf,UACE,sBAAMA,UAAU,SAASgB,QAAS,kBAAM,EAAKd,gBAAgB,SAAUjD,EAAM4D,SAA7E,SAAuF5D,EAAM4D,SAD/F,MAEY,sBAAMb,UAAU,OAAOgB,QAAS,kBAAM,EAAKd,gBAAgB,OAAQjD,EAAMgE,OAAzE,SAAiFhE,EAAMgE,UAEnG,qBAAKjB,UAAU,aAAagB,QAAS,kBAAM,EAAKd,gBAAgB,QAASjD,EAAMiE,QAA/E,SAAwFjE,EAAMiE,QAC9F,qBAAKlB,UAAU,YAAf,SAA6B/C,EAAMxH,kBAAqBwH,EAAMxH,kBAAkBuH,eAAe,UAAW,CAAEmE,QAAS,OAAQ/H,MAAO,OAAQgI,IAAK,UAAW/H,KAAM,UAAWgI,KAAM,UAAWC,OAAQ,YAAe,KACrN,sBAAKtB,UAAU,cAAf,UACE,cAAC,IAAD,CAAiBuB,KAAMC,IACrBR,QAAS,kBAAM,EAAKZ,kBAAkB,IACtCJ,UAAS,UAAKU,EAAL,UACTe,MAAM,qBAER,cAAC,IAAD,CAAiBF,KAAMG,IACrBV,QAAS,kBAAM,EAAKZ,mBAAmB,IACvCJ,UAAS,UAAKW,EAAL,UACThI,MAAO,CAAEgJ,WAAY,QACrBF,MAAM,gCAGV,qBAAKxC,GAAG,mB,GA7EsBC,IAAMC,WCHtCrB,EAAa,CAAC,OAAQ,MAAO,SAAU,SAAU,UAEjD8D,EAAe,SAAC,GAAsE,IAApEhJ,EAAmE,EAAnEA,QAAS0D,EAA0D,EAA1DA,WAAY1H,EAA8C,EAA9CA,SAAUiN,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,kBACjE,OACE,sBAAK9B,UAAU,eAAf,UACE,+BAAKpH,EAAL,eACA,sBAAKoH,UAAU,qBAAf,UACE,gCACE,+CACA,qBAAKA,UAAU,gBAAf,SACGlC,EAAWiE,KAAI,SAACC,EAAKlN,GACpB,OACE,qCACE,uBAAOmN,QAAO,UAAK3F,EAAL,YAAmB0F,EAAnB,oBAAd,SAAyDA,IACzD,uBAAOvN,KAAK,QAAQyN,KAAK,MAAMC,IAAI,IAAIC,IAAI,IAAI1N,MAAOE,EAASE,GAAG,GAAIiL,SAAU,SAAChF,GAAD,OAAW8G,EAAWvF,EAAY0F,EAAK,UAAWjH,EAAMwE,OAAO7K,QAAQuK,GAAE,UAAK3C,EAAL,YAAmB0F,EAAnB,iCAMnK,gCACE,8CACA,qBAAKhC,UAAU,gBAAf,SACGlC,EAAWiE,KAAI,SAACC,EAAKlN,GACpB,OACE,qCACE,uBAAOmN,QAAO,UAAK3F,EAAL,YAAmB0F,EAAnB,mBAAd,SAAwDA,IACxD,uBAAOvN,KAAK,QAAQyN,KAAK,KAAKC,IAAI,IAAIC,IAAI,KAAK1N,MAAOE,EAASE,GAAG,GAAIiL,SAAU,SAAChF,GAAD,OAAW8G,EAAWvF,EAAY0F,EAAK,SAAUjH,EAAMwE,OAAO7K,QAAQuK,GAAE,UAAK3C,EAAL,YAAmB0F,EAAnB,mCAOpK,wBAAQhC,UAAU,uBAAuBgB,QAAS,kBAAMc,EAAkBxF,IAA1E,+BAKe+F,E,kDACnB,WAAYjI,GAAQ,IAAD,8BACjB,cAAMA,IACD0E,MAAQ,GAFI,E,qDAMT,IAAD,EACoEC,KAAK3E,MAAxEyH,EADD,EACCA,WAAYS,EADb,EACaA,gBAAiBC,EAD9B,EAC8BA,eAAgBT,EAD9C,EAC8CA,kBAErD,OACE,gCACE,cAAC,EAAD,CAAclJ,QAAQ,UAAU0D,WAAW,UAAU1H,SAAU0N,EAC7DT,WAAYA,EAAYC,kBAAmBA,IAC7C,cAAC,EAAD,CAAclJ,QAAQ,SAAS0D,WAAW,SAAS1H,SAAU2N,EAC3DV,WAAYA,EAAYC,kBAAmBA,W,GAff5C,IAAMC,WC7BtCqD,G,MAAgB,CAAC,OAAQ,MAAO,SAAU,SAAU,WAgf3CC,E,kDA9eb,WAAYrI,GAAQ,IAAD,8BACjB,cAAMA,IA6CRjF,kBAAoB,SAACuN,EAAQ/N,EAASgO,GACpC,EAAKrD,UAAS,iBAAO,CACnBsD,eAAgBF,EAChBnC,cAAe5L,EACfgO,UAAWA,OAlDI,EA2DnBvN,WAAa,SAACgE,EAAOC,GACnB,IAAI1E,EAAU,GADc,EAGW,EAAKmK,MAApCxC,EAHoB,EAGpBA,WAAYsG,EAHQ,EAGRA,eAED,YAAftG,EACF3H,EAAUiO,EAAexL,IAAIiC,GAAMD,GACX,WAAfkD,IAET3H,EAAUiO,EAAexL,IAAIiC,GAAM/C,SAErC,EAAKgJ,UAAS,SAACuD,GAAD,MAAgB,CAC5BlO,QAASA,EACTmO,gBAAiBnO,EACjBkJ,WAAY,OACZkF,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,GAC1FlK,MAAOA,EACPC,KAAMA,EACN2F,SAAS,EACTsB,cAAe,MACb,WACE,EAAKxB,MAAMnK,SACb,EAAK4O,kBAjFQ,EA0FnBtL,YAAc,SAACuL,GACb,EAAKlE,UAAS,iBAAO,CACnBmE,SAAUD,OA5FK,EAmGnBD,YAAc,WACZ,IAAMG,EAAY,IAAIC,IAChBC,EAAU,IAAID,IACdE,EAAW,IAAIF,IAErB,EAAK7E,MAAMnK,QAAQmP,SAAQ,SAAA9O,GACzB0O,EAAUK,IAAI/O,EAAE6L,QAChB+C,EAAQG,IAAI/O,EAAEiM,MACd4C,EAASE,IAAI/O,EAAEkM,UAGjB,IAAM8C,EAAiB,SAACC,EAAGC,GACzB,OAAOD,EAAEE,cAAcC,cAAcF,EAAEC,gBAEnCE,EAAaC,MAAMC,KAAKb,GAAWc,KAAKR,GACxCS,EAAWH,MAAMC,KAAKX,GAASY,KAAKR,GACpCU,EAAYJ,MAAMC,KAAKV,GAAUW,KAAKR,GAE5C,EAAK1E,UAAS,iBAAO,CACnBO,SAAU,CAAE8E,OAAQN,EAAYO,KAAMH,EAAUI,MAAOH,GACvD1F,SAAS,OAvHM,EA+HnB7C,gBAAkB,SAAC8C,GACjB,EAAKK,UAAS,iBAAO,CACnBgB,aAAcrB,EACdpB,WAAY,SACZkF,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,QAnI3E,EA4InBlH,mBAAqB,SAACzH,EAASmQ,GAC7B,EAAKxF,UAAS,iBAAO,CACnBwD,gBAAiBnO,EACjBkJ,WAAYiH,EACZ/B,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,QAhJ3E,EAuJnByB,gBAAkB,WAChB,EAAKzF,UAAS,SAACuD,GAAD,MAAgB,CAC5BmC,aAAcnC,EAAUmC,iBAzJT,EAiKnB7E,cAAgB,SAAC1L,GACf,EAAK6K,UAAS,iBAAO,CACnB2F,gBAAiBxQ,OAnKF,EA2KnByQ,kBAAoB,SAACnK,GACnB,IAAMoK,EAAapK,EAAMwE,OAAO6F,KAChC,EAAK9F,UAAS,SAACuD,GACb,MAAO,CACLE,UAAU,2BACLF,EAAUE,WADN,kBAENoC,GAActC,EAAUE,UAAUoC,KAErCtH,WAAY,UAEb,WACD,IAAMiF,EL7Ia,SAACC,EAAWpO,GACnC,IAAI0Q,EAAa,GAEXC,EAAW,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAElFC,EAAmB,EASvB,MAVmB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAGnDzB,SAAQ,SAAC1C,EAAKtM,GACnBiO,EAAU3B,KACZiE,EAAaA,EAAWG,OAAO7Q,EAAQI,QAAO,SAAAC,GAAC,OAAIA,EAAEgB,MAAQsP,EAASxQ,OACtEyQ,QAIAA,EAAmB,EACdF,EAEA1Q,EK4HmB8Q,CAAU,EAAK3G,MAAMiE,UAAW,EAAKjE,MAAMnK,SACnE,EAAK2K,UAAS,iBAAO,CACnBwD,gBAAiBA,UAxLJ,EA6LnB4C,iBAAmB,SAAC3K,GAClB,IACM4K,EADW5K,EAAMwE,OAAOqG,MACR,GAEhBC,EAAa,IAAIC,WASvBD,EAAWE,iBAAiB,QAPV,YLCW,SAAC/M,EAAM7D,EAAmBC,EAAY6C,GACrE/C,EAAe8D,EAAM7D,EAAmBC,GACxC4C,EAAuBgB,EAAMf,GAE7BK,IKDI0N,CAHWlN,IAAY+M,EAAWI,QAAQ,SAAUjR,GAClD,OAAOA,KAEe,EAAKG,kBAAmB,EAAKC,WAAY,EAAK6C,gBAGzB,GAC3C0N,GACFE,EAAWK,WAAWP,IA5MP,EAgNnBQ,cAAgB,SAACC,GACf,EAAK9G,UAAS,iBAAO,CACnBhD,WAAY8J,MACV,WACF,EAAKhR,WAAW,EAAK0J,MAAM1F,MAAO,EAAK0F,MAAMzF,UApN9B,EAwNnBwI,WAAa,SAACvF,EAAY+J,EAAU3G,EAAShL,GAC3C,EAAK4K,UAAS,SAACuD,GACb,IAAMyD,EAA8B,YAAfhK,EAA4B,kBAAoB,iBAC/DiK,EAA4B,YAAZ7G,EAAyB,EAAI,EAC7C8G,EAAW,YAAO3D,EAAUyD,IAGlC,OADAE,EADchE,EAAczE,QAAQsI,IACjBE,GAAgB7R,EAC5B,eACJ4R,EAAcE,OAhOF,EAqOnB1E,kBAAoB,SAACxF,GACnB,IAeMmK,EAAkC,YAAfnK,EAfM,CAC7B,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,IAAK,IAGsB,CAC5B,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,IAAK,IAGFoD,EAA0B,YAAfpD,EAA4B,kBAAoB,iBACjE,EAAKgD,SAAL,eACGI,EAAU+G,KAtPb,EAAK3H,MAAQ,CACXkG,aAAa,EACbpC,eAAgB,IAAIrN,IACpBZ,QAAS,GACT4L,cAAe,GACfuC,gBAAiB,GACjBjF,WAAY,OACZ4F,SAAU,GACVrK,MAAO,EACPC,KAAM,EACNwG,SAAU,CAAE8E,OAAQ,GAAIC,KAAM,GAAIC,MAAO,IACzCI,gBAAiB,SACjBlC,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,GAC1FtE,SAAS,EACTsB,cAAe,EACfhE,WAAY,UACZqG,UAAW,GACXL,gBAAiB,CACf,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,IAAK,IAERC,eAAgB,CACd,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,IAAK,KA/BO,E,gEAqCjB1J,EAAMkG,KAAK5J,kBAAmB4J,KAAK3J,WAAY2J,KAAK9G,e,+BAuN5C,IAAD,SAKH8G,KAAKD,MAHPnK,EAFK,EAELA,QAASmO,EAFJ,EAEIA,gBAAiBvC,EAFrB,EAEqBA,cAAeV,EAFpC,EAEoCA,SAAUoF,EAF9C,EAE8CA,gBACnDlC,EAHK,EAGLA,UAAWlF,EAHN,EAGMA,WAAYzE,EAHlB,EAGkBA,MAAOC,EAHzB,EAGyBA,KAAMiD,EAH/B,EAG+BA,WAAYqG,EAH3C,EAG2CA,UAAWc,EAHtD,EAGsDA,SAAUnD,EAHhE,EAGgEA,aACrEtB,EAJK,EAILA,QAASgG,EAJJ,EAIIA,YAGExM,SAASkO,qBAAqB,QAAQ,GAC9C1G,UAAagF,EAAe,GAAK,cAGtC,IAAM2B,EAAe,SAACvM,GACpB,OACE,sBAAK6E,GAAG,gBAAR,UACE,wBAAOgD,QAAQ,iBAAf,UACE,iCAAM,cAAC,IAAD,CAAiBV,KAAMqF,MAA7B,iBACA,yBAAQ3H,GAAG,gBAAgBc,SAAU,SAAChF,GAAD,OAAW,EAAKoF,cAAcpF,EAAMwE,OAAO7K,QAAQA,MAAOuQ,EAA/F,UACE,wBAAQvQ,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,yBAGJ,uBACA,cAAC,EAAD,CACEgL,QAASuF,EACT7I,mBAAoB,EAAKA,mBACzBpD,KAAMrE,EACNkL,SAAQ,UAAKoF,EAAL,mBAMV4B,EAAY,SAACzM,GAAW,IACpB0M,EAAuC1M,EAAvC0M,YAAaC,EAA0B3M,EAA1B2M,SAAUC,EAAgB5M,EAAhB4M,YAC/B,OACE,wBAAO/E,QAAS6E,EAAhB,UACE,uBACErS,KAAK,WACL2Q,KAAM0B,EACN7H,GAAI6H,EACJpS,MAAOqS,EACPE,QAASlE,EAAU+D,GACnB/G,SAAU,EAAKmF,oBAEjB,sBAAMlF,UAAU,WAAhB,SAA4BgH,QAK5BE,EAAY,SAAC9M,GACjB,OACE,sBAAK6E,GAAG,cAAR,UACE,kCAAO,cAAC,IAAD,CAAiBsC,KAAM4F,MAA9B,iCACA,sBAAKlI,GAAG,gBAAR,UACE,cAAC4H,EAAD,CAAWC,YAAY,MAAMC,SAAS,SAASC,YAAY,QAC3D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,UAAUC,YAAY,QAC5D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,YAAYC,YAAY,QAC9D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,WAAWC,YAAY,QAC7D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,SAASC,YAAY,QAC3D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,WAAWC,YAAY,QAC7D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,SAASC,YAAY,eAM7DI,EAAoB,SAACrM,GACzB,IAAMsM,EAAWC,SAASvM,EAAMwE,OAAO7K,OACvC,EAAKU,WAAWiS,EAAUhO,IAGtBkO,EAAmB,SAACxM,GACxB,IAAMyM,EAAUF,SAASvM,EAAMwE,OAAO7K,OACtC,EAAKU,WAAWgE,EAAOoO,IAyBnBC,EAAiB,SAACrN,GACtB,IAMIsN,EACAC,EANEC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAE7CC,EAAgB1O,EAAaC,EAAOC,GACpCyO,EAAgBxO,EAAaF,EAAOC,GAc1C,MATmB,YAAfiD,GACFoL,EAAgBG,EAAgBlF,EAAU,GAAM,iBAAmB,GACnEgF,EAAgBG,EAAgBnF,EAAU,GAAM,iBAAmB,IAC3C,WAAfrG,IACToL,GAA0D,IAA1CjE,EAAS1F,QAAQuJ,SAASjO,GAAQ,IAAc,iBAChEsO,GAA0D,IAA1ClE,EAAS1F,QAAQuJ,SAASjO,GAAQ,IAAc,kBAKhE,sBAAK2G,UAAU,kBAAf,UACE,cAAC,IAAD,CAAiBuB,KAAMwG,IAAW/H,UAAS,yBAAoB2H,GAAgB3G,QAAS,kBAhC/D,SAAC1E,GAC9B,GAAmB,YAAfA,EAA0B,CAC5B,IAAMwL,EAAgBxO,EAAaF,EAAOC,GACpC2O,EAAYF,EAAcxQ,WAAa,EACvC2Q,EAAWH,EAAc3R,cAC/B,EAAKf,WAAW4S,EAAWC,OACH,WAAf3L,GACT,EAAKlH,WAAWgE,EAAOkO,SAASjO,GAAQ,GAyBwD6O,CAAuB5L,IACnHmF,MAAK,yBAAoC,YAAfnF,EAA4B,QAAU,UAElE,cAAC,IAAD,CAAiBiF,KAAM4G,IAAanI,UAAS,2BAAsB0H,GAAgB1G,QAAS,kBA9CnE,SAAC1E,GAC9B,GAAmB,YAAfA,EAA0B,CAC5B,IAAMuL,EAAgB1O,EAAaC,EAAOC,GACpC+O,EAAYP,EAAcvQ,WAAa,EACvC+Q,EAAgBR,EAAc1R,cACpC,EAAKf,WAAWgT,EAAWC,OACH,WAAf/L,GACT,EAAKlH,WAAWgE,EAAOkO,SAASjO,GAAQ,GAuC4DiP,CAAuBhM,IACvHmF,MAAK,yBAAoC,YAAfnF,EAA4B,QAAU,UAEjD,YAAfA,GACA,wBAAQ2C,GAAG,eAAec,SAAUqH,EAAmB1S,MAAO0E,EAA9D,SA3BS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YA4B9G2I,KAAI,SAAC3I,EAAOtE,GAClB,OACE,wBAAQJ,MAAOkT,EAAO9S,GAAtB,SAA2BsE,SAKnC,wBAAQ6F,GAAG,cAAcc,SAAUwH,EAAkB7S,MAAO2E,EAA5D,SACGoK,EAAS1B,KAAI,SAAC1I,GACb,OACE,wBAAQ3E,MAAO2E,EAAf,SAAsBA,aAQ5BkP,EAAmB,SAAC,GAAD,IAAG7T,EAAH,EAAGA,MAAH,OACvB,uBAAMsL,UAAU,qBAAhB,UACE,uBAAOf,GAAIvK,EAAOD,KAAK,QAAQC,MAAOA,EAAO0Q,KAAK,cAAc6B,QAAS3K,IAAe5H,EACtFqL,SAAU,kBAAM,EAAKoG,cAAczR,MAErC,uBAAOuN,QAASvN,EAAhB,SAAwBA,QAI5B,OACE,sBAAKsL,UAAU,iBAAf,UACE,sBAAKf,GAAG,UAAR,UACE,qBAAKe,UAAU,kBACf,+CAEF,sBAAKf,GAAG,oBAAR,UACE,sBAAKA,GAAG,yBAAyB+B,QAASjC,KAAKgG,gBAA/C,UACE,wBAAO9C,QAAQ,cAAcjC,UAAU,qBAAvC,UACE,cAAC,IAAD,CAAiBuB,KAAMiH,MADzB,iBAGA,uBAAOvJ,GAAG,cAAcxK,KAAK,OAAOgU,OAAO,OAAO1I,SAAUhB,KAAK2G,mBACjE,qBAAK1F,UAAU,qBAAf,SAEKgF,EACE,cAAC,IAAD,CAAiBzD,KAAMmH,MAEvB,cAAC,IAAD,CAAiBnH,KAAMoH,WAIhC,uDACA,sBAAK3I,UAAU,YAAf,UACE,cAAC2G,EAAD,IACA,cAACO,EAAD,IACA,yBAAQjI,GAAG,QAAQe,UAAU,SAASgB,QAAS,kBAAM,EAAK5L,WAAWgE,EAAOC,IAA5E,UAAmF,cAAC,IAAD,CAAiBkI,KAAMqH,IAAWC,KAAK,eAA1H,YACA,cAAC,EAAD,CACEvI,aAAcA,EACdlE,mBAAoB2C,KAAK3C,mBACzB+D,cAAepB,KAAKoB,cACpBhE,gBAAiB4C,KAAK5C,gBACtBnD,KAAMrE,EACN4L,cAAeA,EACfjE,WAAYA,OAGhB,sBAAK0D,UAAU,gBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,cAACuI,EAAD,CAAkB7T,MAAM,YACxB,cAAC6T,EAAD,CAAkB7T,MAAM,cAE1B,sBAAKsL,UAAU,iBAAf,UACE,sBAAKf,GAAG,UAAR,UAAoB6D,EAAmBA,EAAgB7N,OAAS,EAAhE,cACA,cAACwS,EAAD,UAGJ,qBAAKxI,GAAG,OAAR,SACE,cAAC,EAAD,CACEjG,KAAMrE,EACNiJ,aAAckF,EACdjF,WAAYA,EACZmB,QAASA,EACT7C,gBAAiB4C,KAAK5C,gBACtBC,mBAAoB2C,KAAK3C,mBACzBC,WAAY,IAAI3G,KAAJ,UAAY0D,EAAZ,cAAuBC,IACnCiD,WAAYA,EACZ1H,SAAqC,YAA1BmK,KAAKD,MAAMxC,WAA4ByC,KAAKD,MAAMwD,gBAAkBvD,KAAKD,MAAMyD,sBAIhG,0BAAUtD,GAAG,kBAAb,SACGY,EAAS8E,OAAO5C,KAAI,SAAA+G,GACnB,OAAO,iCAASA,SAGpB,0BAAU7J,GAAG,gBAAb,SACGY,EAAS+E,KAAK7C,KAAI,SAAA+G,GACjB,OAAO,iCAASA,SAGpB,0BAAU7J,GAAG,iBAAb,SACGY,EAASgF,MAAM9C,KAAI,SAAA+G,GAClB,OAAO,iCAASA,SAGpB,cAAC,EAAD,CACEjH,WAAY9C,KAAK8C,WACjBS,gBAAiBvD,KAAKD,MAAMwD,gBAC5BC,eAAgBxD,KAAKD,MAAMyD,eAC3BjG,WAAYA,EACZwF,kBAAmB/C,KAAK+C,2B,GAxehB5C,IAAMC,WCDT4J,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlQ,MAAK,YAAkD,IAA/CmQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjR,SAASC,eAAe,SAM1BsQ,M","file":"static/js/main.b8b9d967.chunk.js","sourcesContent":["import * as d3 from \"d3\";\r\n\r\nlet datasetLoaded = [];\r\n\r\n/**\r\n * Generates the yState for the month given a date in the month\r\n * @param {Date} date Date object whose date is in the month\r\n * @returns Array consisting of 2 elements: the last day and first day of the month\r\n */\r\nexport function generateYState(date, timePeriod) {\r\n  if (timePeriod === 'monthly') {\r\n    // get first day and last day of the month\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const yState = [lastDay, firstDay];\r\n    return yState;\r\n  } else if (timePeriod === 'yearly') {\r\n    // get first day and last day of the year\r\n    const year = date.getFullYear();\r\n    const firstDay = new Date(`1 1 ${year}`);\r\n    const lastDay = new Date(`1 1 ${year + 1}`);\r\n    lastDay.setDate(lastDay.getDate() - 1);\r\n    const yState = [lastDay, firstDay];\r\n    return yState;\r\n  } else {\r\n    // get first data point and last data point\r\n  }\r\n}\r\n\r\n/**\r\n * Handles filter functionality\r\n * @param {string} type the type of filter\r\n * @param {string} value the value to filter by\r\n * @param {array} dataset the data to filter\r\n * @returns the filtered dataset\r\n */\r\nexport function searchFilter(type, value, dataset) {\r\n  const settings = ['song', 'artist', 'album'];\r\n  const keys = ['Song', 'Artist', 'Album'];\r\n  for (let i = 0; i < settings.length; i++) {\r\n    if (type === settings[i]) {\r\n      return dataset.filter(d => d[keys[i]] === value);\r\n    }\r\n  }\r\n  // search type not found;\r\n  return [];\r\n}\r\n\r\n/**\r\n * Filters the current month's data by the given list of days\r\n * @param {Object} dayFilter\r\n * @param {Array} dataset\r\n */\r\nexport const filterDay = (dayFilter, dataset) => {\r\n  let newDataset = [];\r\n  // get the applied day filters from the object\r\n  const weekList = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n  const abbrevList = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\r\n  let daySelectedCount = 0;\r\n\r\n  abbrevList.forEach((day, i) => {\r\n    if (dayFilter[day]) {\r\n      newDataset = newDataset.concat(dataset.filter(d => d.Day === weekList[i]));\r\n      daySelectedCount++;\r\n    }\r\n  });\r\n  //if no days selected, display all\r\n  if (daySelectedCount > 0) {\r\n    return newDataset;\r\n  } else {\r\n    return dataset;\r\n  }\r\n}\r\n\r\n/**\r\n * Loads the music data from the csv\r\n */\r\nconst loadData = () => {\r\n  datasetLoaded = d3.csv('/Music-Listening-Times-v2.0/lastfm-data-utf.csv').then((data) => {\r\n    return data;\r\n  });\r\n}\r\n\r\n/**\r\n * Processes the data into buckets\r\n * @param {Function} setDatasetBuckets \r\n * @param {Function} setDataset\r\n */\r\nconst examplePreprocessData = (setDatasetBuckets, setDataset) => {\r\n  datasetLoaded.then(dataset => {\r\n    preprocessData(dataset, setDatasetBuckets, setDataset);\r\n  });\r\n}\r\n\r\n/**\r\n * Processes the data into buckets\r\n * @param {Function} setDatasetBuckets \r\n * @param {Function} setDataset\r\n */\r\nconst preprocessData = (dataset, setDatasetBuckets, setDataset) => {\r\n  //sorts all the data into buckets by the month and year\r\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n  const dataMap = new Map();\r\n\r\n  for (let i = 0; i < dataset.length; i++) {\r\n    const d = dataset[i];\r\n\r\n    // Some songs have blank RawDateTime's for some reason, skip these values\r\n    if (!d.RawDateTime) {\r\n      // remove the invalid data point from the dataset\r\n      dataset.splice(i, 1);\r\n      i--;\r\n      continue;\r\n    }\r\n\r\n    d.ConvertedDateTime = new Date(d.RawDateTime);\r\n\r\n    // minus 5 for BST -> EDT conversion\r\n    // This conversion will be off by an hour or so during times of daylight savings transition\r\n    // TODO: get user's timezone, allow user to input timezone to convert \r\n    d.ConvertedDateTime.setHours(d.ConvertedDateTime.getHours() - 5);\r\n    d.Date = new Date(d.ConvertedDateTime.toDateString());\r\n    d.Time = new Date().setHours(d.ConvertedDateTime.getHours(), d.ConvertedDateTime.getMinutes());\r\n    d.Day = days[d.ConvertedDateTime.getDay()];\r\n\r\n    const yearKey = (d.Date.getFullYear());\r\n    if (!dataMap.has(yearKey)) {\r\n      dataMap.set(yearKey, { yearArr: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [] });\r\n    }\r\n\r\n    const yearData = dataMap.get(yearKey);\r\n    const monthBucket = yearData[d.Date.getMonth() + 1];\r\n\r\n    d.monthID = monthBucket.length;\r\n    d.yearID = yearData.yearArr.length;\r\n    d.ID = i;\r\n\r\n    monthBucket.push(d);\r\n    yearData.yearArr.push(d);\r\n  }\r\n\r\n\r\n  const latestDate = new Date(`${dataset[0].Date.getMonth() + 2} 1 ${dataset[0].Date.getFullYear()}`);\r\n  const earliestDate = new Date(dataset[dataset.length - 1].Date);\r\n\r\n  latestDate.setHours(0, 0, 0, latestDate.getMilliseconds() - 1);\r\n  earliestDate.setDate(1);\r\n\r\n  setDatasetBuckets(dataMap, dataset, [earliestDate, latestDate]);\r\n\r\n  setDataset(latestDate.getMonth() + 1, latestDate.getFullYear());\r\n}\r\n\r\n/**\r\n * Initializes the date range (list of years)\r\n * @param {Function} setYearList Sets the year list to the given list\r\n */\r\nconst exampleYearListInitialization = (setYearList) => {\r\n  datasetLoaded.then(dataset => {\r\n    yearListInitialization(dataset, setYearList);\r\n  });\r\n}\r\n\r\n/**\r\n * Initializes the date range (list of years)\r\n * @param {Function} setYearList Sets the year list to the given list\r\n */\r\nconst yearListInitialization = (dataset, setYearList) => {\r\n  const latestYear = dataset[0].Date.getFullYear();\r\n  const earliestYear = dataset[dataset.length - 1].Date.getFullYear();\r\n\r\n  let currYear = latestYear;\r\n\r\n  let uniqueYears = [];\r\n  while (currYear >= earliestYear) {\r\n    uniqueYears.push(currYear);\r\n    currYear -= 1;\r\n  }\r\n  setYearList(uniqueYears);\r\n}\r\n\r\n/**\r\n * Hides the loading icon and shows the application\r\n */\r\nconst finishedLoading = () => {\r\n  //finished loading\r\n  const loading = document.getElementById('loading');\r\n  const content = document.getElementById('content-container');\r\n\r\n  loading.style.display = 'none';\r\n  content.style.display = 'block';\r\n}\r\n\r\n/**\r\n * Setup for the application\r\n * @param {Function} setDatasetBuckets \r\n * @param {Function} setDataset\r\n * @param {Function} setYearList \r\n */\r\nexport const setup = (setDatasetBuckets, setDataset, setYearList) => {\r\n  loadData();\r\n  examplePreprocessData(setDatasetBuckets, setDataset);\r\n  exampleYearListInitialization(setYearList);\r\n\r\n  finishedLoading();\r\n}\r\n\r\nexport const uploadedDataSetup = (data, setDatasetBuckets, setDataset, setYearList) => {\r\n  preprocessData(data, setDatasetBuckets, setDataset);\r\n  yearListInitialization(data, setYearList);\r\n\r\n  finishedLoading();\r\n}\r\n\r\n/**\r\n * Gets the next month\r\n * @param {number} month The numerical month you use normally (1 = Janurary, 12 = December)\r\n * @param {number} year The numerical full year (ex: 2021)\r\n * @returns Next month as a Date object\r\n */\r\nexport const getNextMonth = (month, year) => {\r\n  // dont need to \"add\" a month since the date object's month indexes from\r\n  return new Date(year, month, 1);\r\n}\r\n\r\n/**\r\n * Gets the previous month\r\n * @param {number} month The numerical month you use normally (1 = Janurary, 12 = December)\r\n * @param {number} year The numerical full year (ex: 2021)\r\n * @returns Previous month as a Date object\r\n */\r\nexport const getPrevMonth = (month, year) => {\r\n  // we subtract 1 for bc of month index from 0\r\n  // we subtract another 1 to get the prev month\r\n  return new Date(year, month - 2, 1);\r\n}","import React from 'react';\r\nimport * as d3 from \"d3\";\r\nimport { generateYState } from '../logic/chart';\r\n\r\nconst width = 950;\r\nconst height = 540;\r\nconst padding = { left: 90, right: 40, top: 10, down: 60 };\r\n\r\nlet svg = {};\r\nlet canvas = {};\r\n\r\nlet xAxisG = {};\r\nlet yAxisG = {};\r\n\r\nlet xScale = {};\r\nlet yScale = {};\r\n\r\nlet clipGroup = {};\r\nlet pointGroup = {};\r\n\r\nlet zoom = {};\r\n\r\nexport default class Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initializeGraph();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { newLoad } = this.props;\r\n    if (newLoad) {\r\n      // brand new month data load\r\n      this.drawGraph();\r\n    } else {\r\n      // updating the current month data with a filter/reset\r\n      this.updateGraph();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the graph for the first time application load\r\n   */\r\n  initializeGraph = () => {\r\n    // GENERATE ELEMENTS \r\n    //Where to add the graph to\r\n    svg = d3.select('#main-graph')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .attr('viewBox', [0, 0, width, height])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet')\r\n      .classed('svg-content', true);\r\n\r\n    canvas = d3.select('#canvas')\r\n      .attr('width', width)\r\n      .attr('height', 45);\r\n\r\n    //append x-axis\r\n    xAxisG = svg.append('g')\r\n      .attr('class', 'x axis')\r\n      .attr('transform', `translate(0, ${height - padding.down})`);\r\n\r\n    //append y-axis\r\n    yAxisG = svg.append('g')\r\n      .attr('class', 'y axis')\r\n      .attr('transform', `translate(${padding.left}, 0)`);\r\n\r\n    const startDay = new Date();\r\n    startDay.setHours(0, 0, 0, 0);\r\n    const endDay = new Date();\r\n    endDay.setHours(23, 59, 59, 59);\r\n\r\n    // x-axis scaled - time from 00:00 - 23:59:59\r\n    xScale = d3.scaleTime()\r\n      .domain([startDay, endDay])\r\n      .range([padding.left, width - padding.right]);\r\n\r\n    yScale = d3.scaleTime()\r\n      .range([padding.top, height - padding.down]);\r\n\r\n    //cursor position vertical line\r\n    let line = svg.append('path')\r\n      .style('stroke', 'var(--secondary-color')\r\n      .style('stroke-width', '3px')\r\n      .style('stroke-dasharray', '4');\r\n\r\n    svg\r\n      .on('mousemove', function (event) {\r\n        let mouse = d3.pointer(event);\r\n        line.attr('d', function () {\r\n          //d = 'M100,0 L100,460\r\n          //move to 100,460 then line to 100,0\r\n          let d = 'M' + mouse[0] + ',0 ';\r\n          d += 'L' + mouse[0] + `,${height - padding.down}`;\r\n          return d;\r\n        });\r\n      })\r\n      .on('mouseover', function () {\r\n        line.style('opacity', .4)\r\n      })\r\n      .on('mouseout', function () {\r\n        line.style('opacity', 0);\r\n      });\r\n\r\n    //append x-axis label\r\n    svg.append('text')\r\n      .attr('class', 'x label')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('transform', `translate(${(padding.left + width - padding.right) / 2}, ${height - padding.down / 4})`)\r\n      .text('Time of Day (hrs:mins)');\r\n\r\n    //append y-axis label\r\n    svg.append('text')\r\n      .attr('class', 'x label')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('transform', `translate(${padding.left / 4}, ${(padding.top + height - padding.down) / 2}) rotate(-90)`)\r\n      .text('Date');\r\n\r\n    // point group\r\n    clipGroup = svg.append('g')\r\n      .attr(\"clip-path\", \"url(#clip)\");\r\n    pointGroup = clipGroup.append('g');\r\n\r\n    // Add a clipPath: everything out of this area won't be drawn.\r\n    svg.append(\"defs\")\r\n      .append(\"clipPath\")\r\n      .attr(\"id\", \"clip\")\r\n      .append(\"rect\")\r\n      .attr(\"width\", width - padding.left - padding.right)\r\n      .attr(\"height\", height - padding.top - padding.down + 14)\r\n      .attr(\"x\", padding.left)\r\n      .attr(\"y\", padding.top - 7);\r\n\r\n    zoom = d3.zoom()\r\n      .scaleExtent([1, 16])\r\n      .extent([[padding.left, padding.top], [width - padding.right, height - padding.down]])\r\n      .translateExtent([[padding.left, padding.top], [width - padding.right, height - padding.down]]);\r\n\r\n    svg.call(zoom).call(zoom.transform, d3.zoomIdentity);\r\n  }\r\n\r\n  // A function that updates the chart when the user zoom and thus new boundaries are available\r\n  zoomed = ({ transform }) => {\r\n    // recover the new scale\r\n    const zx = transform.rescaleX(xScale).interpolate(d3.interpolateRound);\r\n    const zy = transform.rescaleY(yScale).interpolate(d3.interpolateRound);\r\n\r\n    // update circle position\r\n    pointGroup.attr('transform', transform);\r\n\r\n    const xAxis = d3.axisBottom(zx)\r\n      .ticks(d3.timeHour.every(1))\r\n      .tickFormat(d3.timeFormat('%H:%M'));\r\n\r\n    const yAxis = d3.axisLeft(zy);\r\n\r\n    xAxisG.call(xAxis);\r\n    yAxisG.call(yAxis);\r\n  }\r\n\r\n  /**\r\n   * Draws the graph with new data (month change)\r\n   */\r\n  drawGraph = () => {\r\n    // OTHER INITIALIZATION\r\n    const { data, setClickedPoint, setFilteredDataset, sampleDate, timePeriod, settings } = this.props;\r\n\r\n    // TODO: need to improve this\r\n    // initial state, loading icon\r\n    // empty state for when no data\r\n    // if (data) {\r\n    const dateInMonth = sampleDate;\r\n    const yState = generateYState(dateInMonth, timePeriod);\r\n\r\n    //y-axis scale    \r\n    yScale.domain(yState);\r\n\r\n    //x-axis line\r\n    var xAxis = d3.axisBottom(xScale)\r\n      .ticks(d3.timeHour.every(1))\r\n      .tickFormat(d3.timeFormat('%H:%M'));\r\n\r\n    //y-axis line\r\n    var yAxis = d3.axisLeft(yScale);\r\n\r\n    xAxisG.call(xAxis);\r\n    yAxisG.call(yAxis);\r\n\r\n    const inputData = (data) ? data : [];\r\n    // clear 'no data message'\r\n    svg.select('.no-data-message').remove();\r\n    if (inputData.length === 0) {\r\n      // genereate 'no data' text\r\n      //append x-axis label\r\n      svg.append('text')\r\n        .attr('class', 'no-data-message')\r\n        .attr('text-anchor', 'middle')\r\n        .attr('transform', `translate(${(padding.left + width - padding.right) / 2}, ${(height - padding.down - padding.top) / 2})`)\r\n        .text(`No data for ${sampleDate.toLocaleString('default', { month: 'long', year: 'numeric' })}`);\r\n    }\r\n\r\n    // RENDER CIRCLES\r\n    //filtered selection\r\n\r\n    var point = pointGroup.selectAll('.point')\r\n      .data(inputData, d => d.ConvertedDateTime);\r\n\r\n    var pointEnter = point.enter()\r\n      .append('g')\r\n      .attr('class', 'point');\r\n\r\n    pointEnter.merge(point)\r\n      .attr('transform', d => {\r\n        var tx = xScale(d.Time);\r\n        var ty = yScale(d.Date);\r\n        return 'translate(' + [tx, ty] + ')';\r\n      });\r\n\r\n    const opacity = settings[0][0];\r\n    const radius = settings[0][1];\r\n\r\n    //add circle to group\r\n    pointEnter.append('circle')\r\n      .attr('r', radius)\r\n      .style('opacity', opacity)\r\n      .on(\"click\", function (e, d) {\r\n        setClickedPoint(d.ID);\r\n        setFilteredDataset([d], 'select');\r\n      });\r\n\r\n    //remove filtered out circles\r\n    point.exit().remove();\r\n\r\n    this.drawCanvasBars(inputData);\r\n\r\n    zoom.on(\"zoom\", (event) => this.zoomed(event));\r\n  }\r\n\r\n  /**\r\n   * Updates the current data in the graph (same month, no month change. filter update)\r\n   */\r\n  updateGraph = () => {\r\n    const { filteredData, filterView, settings } = this.props;\r\n\r\n    const categories = ['none', 'day', 'search', 'select', 'hidden'];\r\n\r\n    const opacity = settings[categories.indexOf(filterView)][0];\r\n    const radius = settings[categories.indexOf(filterView)][1];\r\n    const hiddenOpacity = settings[categories.indexOf('hidden')][0];\r\n    const hiddenRadius = settings[categories.indexOf('hidden')][1];\r\n\r\n    //filtered selection\r\n    var point = pointGroup.selectAll('.point')\r\n      .data(filteredData, d => d.ConvertedDateTime);\r\n\r\n    point.select(\"circle\")\r\n      .attr('r', radius)\r\n      .style('opacity', opacity);\r\n\r\n    //remove filtered out circles\r\n    point.exit()\r\n      .select(\"circle\")\r\n      .attr('r', hiddenRadius)\r\n      .style('opacity', hiddenOpacity);\r\n\r\n    this.drawCanvasBars(filteredData);\r\n\r\n    zoom.on(\"zoom\", (event) => this.zoomed(event));\r\n  }\r\n\r\n  /**\r\n   * Draws the vertical bars on the single axis time graph\r\n   * @param {Array} data The data to use for the graph\r\n   */\r\n  drawCanvasBars = (data) => {\r\n    const cWidth = canvas.node().width;\r\n    const cHeight = canvas.node().height;\r\n\r\n    //object with prop and methods used to render graphics in canvas element\r\n    let context = canvas.node().getContext('2d');\r\n\r\n    // clear canvas\r\n    context.clearRect(0, 0, cWidth, cHeight);\r\n\r\n    const style = getComputedStyle(document.body);\r\n    const rgb = style.getPropertyValue('--default-rgb');\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      let d = data[i];\r\n\r\n      //draw rect\r\n      context.fillStyle = `rgba(${rgb}, .01)`;\r\n      context.fillRect(xScale(d.Time), 0, 3, cHeight);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <canvas id=\"canvas\"></canvas>\r\n      <svg id=\"main-graph\"></svg>\r\n    </div>\r\n  }\r\n}","import React from 'react';\r\nimport { searchFilter } from '../logic/chart';\r\n\r\nexport default class SearchForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState(() => ({\r\n      value: event.target.value,\r\n    }));\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { setting, setFilteredDataset, data } = this.props;\r\n    const filteredDataset = searchFilter(setting, this.state.value, data);\r\n    setFilteredDataset(filteredDataset, 'search');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          id=\"filter-input\"\r\n          list={this.props.datalist}\r\n          placeholder=\"Search for...\"\r\n          onChange={this.handleChange}\r\n          value={this.state.value}\r\n        />\r\n        <input type=\"submit\" className=\"button\" id=\"submit-button\" value=\"Search\" />\r\n      </form >\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { searchFilter } from '../logic/chart';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faLongArrowAltLeft, faLongArrowAltRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class SongInfo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  handleInfoClick = (type, value) => {\r\n    const { setFilteredDataset, setSearchType, data } = this.props;\r\n\r\n    // set the datalist setting to artist\r\n    setSearchType(type);\r\n\r\n    // filter the dataset\r\n    const filteredDataset = searchFilter(type, value, data);\r\n    setFilteredDataset(filteredDataset, 'search');\r\n  }\r\n\r\n  handlePointChange = (change) => {\r\n    // filterView is assumed to be in 'select'\r\n    const { setFilteredDataset, setClickedPoint, clickedPoint, entireDataset } = this.props;\r\n\r\n    const newID = clickedPoint + change;\r\n    // check if valid change, if out of range dont do anything\r\n    if (newID >= 0 && newID < entireDataset.length) {\r\n      // need to change filtereddatasetmonth \r\n      setFilteredDataset([entireDataset[newID]], 'select');\r\n      setClickedPoint(newID);\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const { clickedPoint, data, entireDataset, timePeriod } = this.props;\r\n\r\n    let dataset = data;\r\n    if (data === undefined) dataset = [];\r\n\r\n    let point = entireDataset[clickedPoint];\r\n    if (point === undefined) point = {};\r\n\r\n    const visibility = (point.Artist === undefined) ? 'hidden' : '';\r\n\r\n    let leftArrowVisibility;\r\n    let rightArrowVisibility;\r\n\r\n    if (timePeriod === 'monthly') {\r\n      leftArrowVisibility = (point.monthID < dataset.length - 1) ? '' : 'disabled-arrow';\r\n      rightArrowVisibility = (point.monthID > 0) ? '' : 'disabled-arrow';\r\n    } else if (timePeriod === 'yearly') {\r\n      leftArrowVisibility = (point.yearID < dataset.length - 1) ? '' : 'disabled-arrow';\r\n      rightArrowVisibility = (point.yearID > 0) ? '' : 'disabled-arrow';\r\n    }\r\n\r\n    return (\r\n      <div className={`song-info-grid ${visibility}`}>\r\n        <img id=\"album-art\" alt=\"placeholder\"\r\n          src=\"https://lastfm.freetls.fastly.net/i/u/174s/2a96cbd8b46e442fc41c2b86b821562f.png\" />\r\n        <div className=\"info\">\r\n          <span className=\"artist\" onClick={() => this.handleInfoClick('artist', point.Artist)}>{point.Artist}\r\n          </span> - <span className=\"song\" onClick={() => this.handleInfoClick('song', point.Song)}>{point.Song}</span>\r\n        </div>\r\n        <div className=\"info album\" onClick={() => this.handleInfoClick('album', point.Album)}>{point.Album}</div>\r\n        <div className=\"info date\">{(point.ConvertedDateTime) ? point.ConvertedDateTime.toLocaleString('default', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' }) : ''}</div>\r\n        <div className=\"song-arrows\">\r\n          <FontAwesomeIcon icon={faLongArrowAltLeft}\r\n            onClick={() => this.handlePointChange(1)}\r\n            className={`${leftArrowVisibility} arrow`}\r\n            title=\"Go to next point\"\r\n          />\r\n          <FontAwesomeIcon icon={faLongArrowAltRight}\r\n            onClick={() => this.handlePointChange(-1)}\r\n            className={`${rightArrowVisibility} arrow`}\r\n            style={{ marginLeft: '10px' }}\r\n            title=\"Go to the previous point\"\r\n          />\r\n        </div>\r\n        <div id=\"tagList\">{ }</div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nconst categories = ['none', 'day', 'search', 'select', 'hidden'];\r\n\r\nconst TimeSettings = ({ display, timePeriod, settings, setSetting, setDefaultSetting }) => {\r\n  return (\r\n    <div className=\"time-setting\">\r\n      <h3>{display} Settings</h3>\r\n      <div className=\"settings-container\">\r\n        <div>\r\n          <h4>Point Opacity</h4>\r\n          <div className=\"settings-grid\">\r\n            {categories.map((cat, i) => {\r\n              return (\r\n                <>\r\n                  <label htmlFor={`${timePeriod}-${cat}-opacity-setting`}>{cat}</label>\r\n                  <input type=\"range\" step=\".01\" min=\"0\" max=\"1\" value={settings[i][0]} onChange={(event) => setSetting(timePeriod, cat, 'opacity', event.target.value)} id={`${timePeriod}-${cat}-opacity-setting`} />\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h4>Point Radius</h4>\r\n          <div className=\"settings-grid\">\r\n            {categories.map((cat, i) => {\r\n              return (\r\n                <>\r\n                  <label htmlFor={`${timePeriod}-${cat}-radius-setting`}>{cat}</label>\r\n                  <input type=\"range\" step=\".5\" min=\"1\" max=\"10\" value={settings[i][1]} onChange={(event) => setSetting(timePeriod, cat, 'radius', event.target.value)} id={`${timePeriod}-${cat}-radius-setting`} />\r\n                </>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button className=\"button reset-default\" onClick={() => setDefaultSetting(timePeriod)}>Reset Default</button>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default class Settings extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { setSetting, monthlySettings, yearlySettings, setDefaultSetting } = this.props\r\n\r\n    return (\r\n      <div>\r\n        <TimeSettings display=\"Monthly\" timePeriod=\"monthly\" settings={monthlySettings}\r\n          setSetting={setSetting} setDefaultSetting={setDefaultSetting} />\r\n        <TimeSettings display=\"Yearly\" timePeriod=\"yearly\" settings={yearlySettings}\r\n          setSetting={setSetting} setDefaultSetting={setDefaultSetting} />\r\n      </div >\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport * as d3 from \"d3\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSun, faMoon, faSearch, faFilter, faRedoAlt, faCaretUp, faCaretDown, faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport Graph from './components/Graph';\r\nimport SearchForm from './components/SearchForm';\r\nimport SongInfo from './components/SongInfo';\r\nimport Settings from './components/Settings';\r\nimport { setup, uploadedDataSetup, filterDay } from './logic/chart.js';\r\nimport { getNextMonth, getPrevMonth } from './logic/chart.js';\r\nimport './App.css';\r\n\r\nconst categoriesKey = ['none', 'day', 'search', 'select', 'hidden'];\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDarkTheme: false,\r\n      datasetBuckets: new Map(),\r\n      dataset: [],\r\n      entireDataset: [],\r\n      filteredDataset: [],\r\n      filterView: 'none',\r\n      yearList: [],\r\n      month: 0,\r\n      year: 0,\r\n      datalist: { artist: [], song: [], album: [] },\r\n      datalistSetting: 'artist',\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n      newLoad: false,\r\n      clickedPoint: -1,\r\n      timePeriod: 'monthly',\r\n      timeRange: [],\r\n      monthlySettings: [\r\n        [.3, 3],\r\n        [.3, 3],\r\n        [.5, 5],\r\n        [.7, 7],\r\n        [.05, 3],\r\n      ],\r\n      yearlySettings: [\r\n        [.3, 2],\r\n        [.3, 2],\r\n        [.4, 3],\r\n        [.7, 7],\r\n        [.03, 2],\r\n      ],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setup(this.setDatasetBuckets, this.setDataset, this.setYearList);\r\n  }\r\n\r\n  /**\r\n   * Initializes the datasetBuckets state\r\n   * @param {Object} bucket Object with attributes of data by month\r\n   * @param {Array} dataset The entire dataset\r\n   * @param {Array} timeRange the bounds of the entire dataset\r\n   */\r\n  setDatasetBuckets = (bucket, dataset, timeRange) => {\r\n    this.setState(() => ({\r\n      datasetBuckets: bucket,\r\n      entireDataset: dataset,\r\n      timeRange: timeRange,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the state to the given month and year\r\n   * @param {number} month The numerical month you use normally (1 = Janurary, 12 = December)\r\n   * @param {number} year The numerical full year (ex: 2021)\r\n   */\r\n  setDataset = (month, year) => {\r\n    let dataset = [];\r\n\r\n    const { timePeriod, datasetBuckets } = this.state;\r\n\r\n    if (timePeriod === 'monthly') {\r\n      dataset = datasetBuckets.get(year)[month];\r\n    } else if (timePeriod === 'yearly') {\r\n      // get dataset for the year\r\n      dataset = datasetBuckets.get(year).yearArr;\r\n    }\r\n    this.setState((prevState) => ({\r\n      dataset: dataset,\r\n      filteredDataset: dataset,\r\n      filterView: 'none',\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n      month: month,\r\n      year: year,\r\n      newLoad: true,\r\n      clickedPoint: -1,\r\n    }), () => {\r\n      if (this.state.dataset) {\r\n        this.setDatalist();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes the yearList state to use as select options\r\n   * @param {Array} years the list of years\r\n   */\r\n  setYearList = (years) => {\r\n    this.setState(() => ({\r\n      yearList: years,\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Sets the artist, song, and album datalist for the current month\r\n   */\r\n  setDatalist = () => {\r\n    const artistSet = new Set();\r\n    const songSet = new Set();\r\n    const albumSet = new Set();\r\n\r\n    this.state.dataset.forEach(d => {\r\n      artistSet.add(d.Artist);\r\n      songSet.add(d.Song);\r\n      albumSet.add(d.Album);\r\n    });\r\n\r\n    const ignoreCaseSort = (a, b) => {\r\n      return a.toLowerCase().localeCompare(b.toLowerCase());\r\n    };\r\n    const artistList = Array.from(artistSet).sort(ignoreCaseSort);\r\n    const songList = Array.from(songSet).sort(ignoreCaseSort);\r\n    const albumList = Array.from(albumSet).sort(ignoreCaseSort);\r\n\r\n    this.setState(() => ({\r\n      datalist: { artist: artistList, song: songList, album: albumList },\r\n      newLoad: false,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the state for clickedPoint to the given point id\r\n   * @param {number} id month point id\r\n   */\r\n  setClickedPoint = (id) => {\r\n    this.setState(() => ({\r\n      clickedPoint: id,\r\n      filterView: 'select',\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Not used for day filter\r\n   * @param {*} dataset \r\n   * @param {*} viewType \r\n   */\r\n  setFilteredDataset = (dataset, viewType) => {\r\n    this.setState(() => ({\r\n      filteredDataset: dataset,\r\n      filterView: viewType,\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the application theme to the opposite theme\r\n   */\r\n  toggleDarkTheme = () => {\r\n    this.setState((prevState) => ({\r\n      isDarkTheme: !prevState.isDarkTheme,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the search type to the given parameter\r\n   * @param {String} type the search type to set to ('artist', 'song', 'album')\r\n   */\r\n  setSearchType = (type) => {\r\n    this.setState(() => ({\r\n      datalistSetting: type,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Handles the toggling of the day filter checkboxes\r\n   * @param {Object} event \r\n   */\r\n  toggleDayCheckbox = (event) => {\r\n    const toggledDay = event.target.name;\r\n    this.setState((prevState) => {\r\n      return {\r\n        dayFilter: {\r\n          ...prevState.dayFilter,\r\n          [toggledDay]: !prevState.dayFilter[toggledDay],\r\n        },\r\n        filterView: 'day',\r\n      };\r\n    }, () => {\r\n      const filteredDataset = filterDay(this.state.dayFilter, this.state.dataset);\r\n      this.setState(() => ({\r\n        filteredDataset: filteredDataset,\r\n      }));\r\n    });\r\n  }\r\n\r\n  handleFileUpload = (event) => {\r\n    const fileList = event.target.files;\r\n    const file = fileList[0];\r\n\r\n    const fileReader = new FileReader();\r\n\r\n    const parseFile = () => {\r\n      var data = d3.csvParse(fileReader.result, function (d) {\r\n        return d;\r\n      });\r\n      uploadedDataSetup(data, this.setDatasetBuckets, this.setDataset, this.setYearList);\r\n    }\r\n\r\n    fileReader.addEventListener(\"load\", parseFile, false);\r\n    if (file) {\r\n      fileReader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  setTimePeriod = (period) => {\r\n    this.setState(() => ({\r\n      timePeriod: period,\r\n    }), () => {\r\n      this.setDataset(this.state.month, this.state.year);\r\n    });\r\n  }\r\n\r\n  setSetting = (timePeriod, category, setting, value) => {\r\n    this.setState((prevState) => {\r\n      const timeSetting = (timePeriod === 'monthly') ? 'monthlySettings' : 'yearlySettings';\r\n      const settingIndex = (setting === 'opacity') ? 0 : 1;\r\n      const newSettings = [...prevState[timeSetting]];\r\n      const index = categoriesKey.indexOf(category);\r\n      newSettings[index][settingIndex] = value;\r\n      return ({\r\n        [timeSetting]: newSettings,\r\n      });\r\n    });\r\n  }\r\n\r\n  setDefaultSetting = (timePeriod) => {\r\n    const defaultMonthlySettings = [\r\n      [.3, 3],\r\n      [.3, 3],\r\n      [.5, 5],\r\n      [.7, 7],\r\n      [.05, 3],\r\n    ];\r\n\r\n    const defaultYearlySettings = [\r\n      [.3, 2],\r\n      [.3, 2],\r\n      [.4, 3],\r\n      [.7, 7],\r\n      [.03, 2],\r\n    ];\r\n    const defaultSettings = (timePeriod === 'monthly') ? defaultMonthlySettings : defaultYearlySettings;\r\n    const setting = (timePeriod === 'monthly') ? 'monthlySettings' : 'yearlySettings';\r\n    this.setState({\r\n      [setting]: defaultSettings\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      dataset, filteredDataset, entireDataset, datalist, datalistSetting,\r\n      dayFilter, filterView, month, year, timePeriod, timeRange, yearList, clickedPoint,\r\n      newLoad, isDarkTheme,\r\n    } = this.state;\r\n\r\n    const body = document.getElementsByTagName('body')[0];\r\n    body.className = (isDarkTheme) ? '' : 'light-theme';\r\n\r\n\r\n    const SearchFilter = (props) => {\r\n      return (\r\n        <div id=\"search-filter\">\r\n          <label htmlFor=\"general-filter\">\r\n            <span><FontAwesomeIcon icon={faSearch} /> Search by </span>\r\n            <select id=\"filter-select\" onChange={(event) => this.setSearchType(event.target.value)} value={datalistSetting}>\r\n              <option value=\"artist\">Artist</option>\r\n              <option value=\"song\">Song</option>\r\n              <option value=\"album\">Album</option>\r\n            </select>\r\n          </label>\r\n          <br />\r\n          <SearchForm\r\n            setting={datalistSetting}\r\n            setFilteredDataset={this.setFilteredDataset}\r\n            data={dataset}\r\n            datalist={`${datalistSetting}-datalist`}\r\n          />\r\n        </div >\r\n      )\r\n    }\r\n\r\n    const DayButton = (props) => {\r\n      const { abbrevation, fullName, displayName } = props;\r\n      return (\r\n        <label htmlFor={abbrevation}>\r\n          <input\r\n            type=\"checkbox\"\r\n            name={abbrevation}\r\n            id={abbrevation}\r\n            value={fullName}\r\n            checked={dayFilter[abbrevation]}\r\n            onChange={this.toggleDayCheckbox}\r\n          />\r\n          <span className=\"checkbox\">{displayName}</span>\r\n        </label>\r\n      )\r\n    }\r\n\r\n    const DayFilter = (props) => {\r\n      return (\r\n        <div id=\"day-filters\">\r\n          <label><FontAwesomeIcon icon={faFilter} /> Filter by day of the week:</label>\r\n          <div id=\"day-container\">\r\n            <DayButton abbrevation=\"mon\" fullName=\"Monday\" displayName=\"Mon\" />\r\n            <DayButton abbrevation=\"tue\" fullName=\"Tuesday\" displayName=\"Tue\" />\r\n            <DayButton abbrevation=\"wed\" fullName=\"Wednesday\" displayName=\"Wed\" />\r\n            <DayButton abbrevation=\"thu\" fullName=\"Thursday\" displayName=\"Thu\" />\r\n            <DayButton abbrevation=\"fri\" fullName=\"Friday\" displayName=\"Fri\" />\r\n            <DayButton abbrevation=\"sat\" fullName=\"Saturday\" displayName=\"Sat\" />\r\n            <DayButton abbrevation=\"sun\" fullName=\"Sunday\" displayName=\"Sun\" />\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const handleMonthChange = (event) => {\r\n      const newMonth = parseInt(event.target.value);\r\n      this.setDataset(newMonth, year);\r\n    };\r\n\r\n    const handleYearChange = (event) => {\r\n      const newYear = parseInt(event.target.value);\r\n      this.setDataset(month, newYear);\r\n    }\r\n\r\n    const handleNextPeriodChange = (timePeriod) => {\r\n      if (timePeriod === 'monthly') {\r\n        const nextMonthDate = getNextMonth(month, year);\r\n        const nextMonth = nextMonthDate.getMonth() + 1;\r\n        const nextMonthYear = nextMonthDate.getFullYear();\r\n        this.setDataset(nextMonth, nextMonthYear);\r\n      } else if (timePeriod === 'yearly') {\r\n        this.setDataset(month, parseInt(year) + 1);\r\n      }\r\n    }\r\n\r\n    const handlePrevPeriodChange = (timePeriod) => {\r\n      if (timePeriod === 'monthly') {\r\n        const prevMonthDate = getPrevMonth(month, year);\r\n        const prevMonth = prevMonthDate.getMonth() + 1;\r\n        const prevYear = prevMonthDate.getFullYear();\r\n        this.setDataset(prevMonth, prevYear);\r\n      } else if (timePeriod === 'yearly') {\r\n        this.setDataset(month, parseInt(year) - 1);\r\n      }\r\n    }\r\n\r\n    const DateNavigation = (props) => {\r\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n      const abbrev = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\n      const nextMonthDate = getNextMonth(month, year);\r\n      const prevMonthDate = getPrevMonth(month, year);\r\n\r\n      let nextDisabled;\r\n      let prevDisabled;\r\n\r\n      if (timePeriod === 'monthly') {\r\n        nextDisabled = (nextMonthDate > timeRange[1]) ? 'disabled-arrow' : '';\r\n        prevDisabled = (prevMonthDate < timeRange[0]) ? 'disabled-arrow' : '';\r\n      } else if (timePeriod === 'yearly') {\r\n        nextDisabled = (yearList.indexOf(parseInt(year) + 1) === -1) && 'disabled-arrow';\r\n        prevDisabled = (yearList.indexOf(parseInt(year) - 1) === -1) && 'disabled-arrow';\r\n      }\r\n\r\n\r\n      return (\r\n        <div className=\"date-navigation\">\r\n          <FontAwesomeIcon icon={faCaretUp} className={`up-caret arrow ${prevDisabled}`} onClick={() => handlePrevPeriodChange(timePeriod)}\r\n            title={`Go to previous ${(timePeriod === 'monthly') ? 'month' : 'year'}`}\r\n          />\r\n          <FontAwesomeIcon icon={faCaretDown} className={`down-caret arrow ${nextDisabled}`} onClick={() => handleNextPeriodChange(timePeriod)}\r\n            title={`Go to the next ${(timePeriod === 'monthly') ? 'month' : 'year'}`}\r\n          />\r\n          {(timePeriod === 'monthly') && (\r\n            <select id=\"month-select\" onChange={handleMonthChange} value={month}>\r\n              {months.map((month, i) => {\r\n                return (\r\n                  <option value={abbrev[i]}>{month}</option>\r\n                )\r\n              })}\r\n            </select>\r\n          )}\r\n          <select id=\"year-select\" onChange={handleYearChange} value={year}>\r\n            {yearList.map((year) => {\r\n              return (\r\n                <option value={year}>{year}</option>\r\n              )\r\n            })}\r\n          </select>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const TimePeriodButton = ({ value }) => (\r\n      <span className=\"time-period-button\">\r\n        <input id={value} type=\"radio\" value={value} name=\"time-period\" checked={timePeriod === value}\r\n          onChange={() => this.setTimePeriod(value)}\r\n        />\r\n        <label htmlFor={value}>{value}</label>\r\n      </span>\r\n    )\r\n\r\n    return (\r\n      <div className=\"site-container\" >\r\n        <div id=\"loading\">\r\n          <div className=\"lds-dual-ring\"></div>\r\n          <h2>Loading...</h2>\r\n        </div>\r\n        <div id=\"content-container\">\r\n          <div id=\"side-options-container\" onClick={this.toggleDarkTheme}>\r\n            <label htmlFor=\"file-upload\" className=\"side-option button\">\r\n              <FontAwesomeIcon icon={faUpload} /> Import CSV\r\n            </label>\r\n            <input id=\"file-upload\" type=\"file\" accept=\".csv\" onChange={this.handleFileUpload}></input>\r\n            <div className=\"button side-option\">\r\n              {\r\n                (isDarkTheme) ?\r\n                  (<FontAwesomeIcon icon={faMoon} />)\r\n                  :\r\n                  (<FontAwesomeIcon icon={faSun} />)\r\n              }\r\n            </div>\r\n          </div>\r\n          <h1>Music Listening Times</h1>\r\n          <div className=\"info-grid\">\r\n            <SearchFilter />\r\n            <DayFilter />\r\n            <button id=\"reset\" className=\"button\" onClick={() => this.setDataset(month, year)}><FontAwesomeIcon icon={faRedoAlt} flip=\"horizontal\" /> Reset</button>\r\n            <SongInfo\r\n              clickedPoint={clickedPoint}\r\n              setFilteredDataset={this.setFilteredDataset}\r\n              setSearchType={this.setSearchType}\r\n              setClickedPoint={this.setClickedPoint}\r\n              data={dataset}\r\n              entireDataset={entireDataset}\r\n              timePeriod={timePeriod}\r\n            />\r\n          </div>\r\n          <div className=\"time-settings\">\r\n            <div className=\"time-period\">\r\n              <TimePeriodButton value=\"monthly\" />\r\n              <TimePeriodButton value=\"yearly\" />\r\n            </div>\r\n            <div className=\"side-container\">\r\n              <div id=\"entries\">{(filteredDataset) ? filteredDataset.length : 0} entries</div>\r\n              <DateNavigation />\r\n            </div>\r\n          </div>\r\n          <div id=\"main\">\r\n            <Graph\r\n              data={dataset}\r\n              filteredData={filteredDataset}\r\n              filterView={filterView}\r\n              newLoad={newLoad}\r\n              setClickedPoint={this.setClickedPoint}\r\n              setFilteredDataset={this.setFilteredDataset}\r\n              sampleDate={new Date(`${month} 1 ${year}`)}\r\n              timePeriod={timePeriod}\r\n              settings={(this.state.timePeriod === 'monthly') ? this.state.monthlySettings : this.state.yearlySettings}\r\n            />\r\n          </div>\r\n        </div>\r\n        <datalist id=\"artist-datalist\">\r\n          {datalist.artist.map(option => {\r\n            return <option>{option}</option>\r\n          })}\r\n        </datalist>\r\n        <datalist id=\"song-datalist\">\r\n          {datalist.song.map(option => {\r\n            return <option>{option}</option>\r\n          })}\r\n        </datalist>\r\n        <datalist id=\"album-datalist\">\r\n          {datalist.album.map(option => {\r\n            return <option>{option}</option>\r\n          })}\r\n        </datalist>\r\n        <Settings\r\n          setSetting={this.setSetting}\r\n          monthlySettings={this.state.monthlySettings}\r\n          yearlySettings={this.state.yearlySettings}\r\n          timePeriod={timePeriod}\r\n          setDefaultSetting={this.setDefaultSetting}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}