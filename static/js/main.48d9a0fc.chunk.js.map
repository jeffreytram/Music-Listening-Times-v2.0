{"version":3,"sources":["logic/chart.js","components/Graph.js","components/SearchForm.js","components/SongInfo.js","App.js","reportWebVitals.js","index.js"],"names":["datasetLoaded","searchFilter","type","value","dataset","settings","keys","i","filter","d","length","preprocessData","setDatasetBuckets","setDataset","days","dataMap","Map","RawDateTime","ConvertedDateTime","Date","setHours","getHours","toDateString","Time","getMinutes","Day","getDay","yearKey","getFullYear","has","set","yearArr","1","2","3","4","5","6","7","8","9","10","11","12","yearData","get","monthBucket","getMonth","monthID","yearID","ID","push","splice","latestDate","earliestDate","getMilliseconds","setDate","yearListInitialization","setYearList","latestYear","earliestYear","currYear","uniqueYears","finishedLoading","loading","document","getElementById","content","style","display","setup","d3","then","data","examplePreprocessData","exampleYearListInitialization","getNextMonth","month","year","getPrevMonth","width","height","padding","svg","canvas","xAxisG","yAxisG","xScale","yScale","clipGroup","pointGroup","zoom","monthlyCircleSettings","yearlyCircleSettings","Graph","props","initializeGraph","attr","classed","append","startDay","endDay","domain","range","line","on","event","mouse","text","scaleExtent","extent","translateExtent","call","transform","zoomed","pointEnter","defaultRadius","zx","rescaleX","interpolate","zy","rescaleY","selectAll","k","xAxis","ticks","every","tickFormat","yAxis","drawGraph","setClickedPoint","setFilteredDataset","sampleDate","timePeriod","yState","date","firstDay","lastDay","getDate","generateYState","inputData","select","remove","toLocaleString","point","enter","merge","circleSettings","opacity","radius","e","exit","drawCanvasBars","updateGraph","filteredData","filterView","hiddenOpacity","hiddenRadius","cWidth","node","cHeight","context","getContext","clearRect","rgb","getComputedStyle","body","getPropertyValue","fillStyle","fillRect","state","this","newLoad","id","React","Component","SearchForm","handleChange","setState","target","handleSubmit","preventDefault","setting","onSubmit","list","datalist","placeholder","onChange","className","SongInfo","handleInfoClick","setSearchType","handlePointChange","change","clickedPoint","entireDataset","newID","undefined","leftArrowVisibility","rightArrowVisibility","visibility","Artist","src","onClick","Song","Album","weekday","day","hour","minute","icon","faLongArrowAltLeft","title","faLongArrowAltRight","marginLeft","App","bucket","timeRange","datasetBuckets","prevState","filteredDataset","dayFilter","mon","tue","wed","thu","fri","sat","sun","setDatalist","years","yearList","artistSet","Set","songSet","albumSet","forEach","add","ignoreCaseSort","a","b","toLowerCase","localeCompare","artistList","Array","from","sort","songList","albumList","artist","song","album","viewType","toggleDarkTheme","isDarkTheme","datalistSetting","toggleDayCheckbox","toggledDay","name","newDataset","weekList","daySelectedCount","concat","filterDay","handleFileUpload","file","files","fileReader","FileReader","addEventListener","uploadedDataSetup","result","readAsText","setTimePeriod","period","getElementsByTagName","SearchFilter","htmlFor","faSearch","DayButton","abbrevation","fullName","displayName","checked","DayFilter","faFilter","handleMonthChange","newMonth","parseInt","handleYearChange","newYear","DateNavigation","nextDisabled","prevDisabled","abbrev","nextMonthDate","prevMonthDate","indexOf","faCaretUp","prevMonth","prevYear","handlePrevPeriodChange","faCaretDown","nextMonth","nextMonthYear","handleNextPeriodChange","map","TimePeriodButton","faUpload","accept","faMoon","faSun","faRedoAlt","flip","option","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+QAEIA,EAAgB,GAoCb,SAASC,EAAaC,EAAMC,EAAOC,GAGxC,IAFA,IAAMC,EAAW,CAAC,OAAQ,SAAU,SAC9BC,EAAO,CAAC,OAAQ,SAAU,SAFiB,WAGxCC,GACP,GAAIL,IAASG,EAASE,GACpB,MAAM,CAAN,EAAOH,EAAQI,QAAO,SAAAC,GAAC,OAAIA,EAAEH,EAAKC,MAAQJ,OAFrCI,EAAI,EAAGA,EAAIF,EAASK,OAAQH,IAAK,CAAC,IAAD,IAAjCA,GAAiC,kCAM1C,MAAO,GAQF,IA8CDI,EAAiB,SAACP,EAASQ,EAAmBC,GAMlD,IAJA,IAAMC,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE1EC,EAAU,IAAIC,IAEXT,EAAI,EAAGA,EAAIH,EAAQM,OAAQH,IAAK,CACvC,IAAME,EAAIL,EAAQG,GAGlB,GAAKE,EAAEQ,YAAP,CAOAR,EAAES,kBAAoB,IAAIC,KAAKV,EAAEQ,aAKjCR,EAAES,kBAAkBE,SAASX,EAAES,kBAAkBG,WAAa,GAC9DZ,EAAEU,KAAO,IAAIA,KAAKV,EAAES,kBAAkBI,gBACtCb,EAAEc,MAAO,IAAIJ,MAAOC,SAASX,EAAES,kBAAkBG,WAAYZ,EAAES,kBAAkBM,cACjFf,EAAEgB,IAAMX,EAAKL,EAAES,kBAAkBQ,UAEjC,IAAMC,EAAWlB,EAAEU,KAAKS,cACnBb,EAAQc,IAAIF,IACfZ,EAAQe,IAAIH,EAAS,CAAEI,QAAS,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,KAGzH,IAAMC,EAAW7B,EAAQ8B,IAAIlB,GACvBmB,EAAcF,EAASnC,EAAEU,KAAK4B,WAAa,GAEjDtC,EAAEuC,QAAUF,EAAYpC,OACxBD,EAAEwC,OAASL,EAASb,QAAQrB,OAC5BD,EAAEyC,GAAK3C,EAEPuC,EAAYK,KAAK1C,GACjBmC,EAASb,QAAQoB,KAAK1C,QA5BpBL,EAAQgD,OAAO7C,EAAG,GAClBA,IA+BJ,IAAM8C,EAAa,IAAIlC,KAAJ,UAAYf,EAAQ,GAAGe,KAAK4B,WAAa,EAAzC,cAAgD3C,EAAQ,GAAGe,KAAKS,gBAC7E0B,EAAe,IAAInC,KAAKf,EAAQA,EAAQM,OAAS,GAAGS,MAE1DkC,EAAWjC,SAAS,EAAG,EAAG,EAAGiC,EAAWE,kBAAoB,GAC5DD,EAAaE,QAAQ,GAErB5C,EAAkBG,EAASX,EAAS,CAACkD,EAAcD,IAEnDxC,EAAWwC,EAAWN,WAAa,EAAGM,EAAWzB,gBAiB7C6B,EAAyB,SAACrD,EAASsD,GAOvC,IANA,IAAMC,EAAavD,EAAQ,GAAGe,KAAKS,cAC7BgC,EAAexD,EAAQA,EAAQM,OAAS,GAAGS,KAAKS,cAElDiC,EAAWF,EAEXG,EAAc,GACXD,GAAYD,GACjBE,EAAYX,KAAKU,GACjBA,GAAY,EAEdH,EAAYI,IAMRC,EAAkB,WAEtB,IAAMC,EAAUC,SAASC,eAAe,WAClCC,EAAUF,SAASC,eAAe,qBAExCF,EAAQI,MAAMC,QAAU,OACxBF,EAAQC,MAAMC,QAAU,SASbC,EAAQ,SAAC1D,EAAmBC,EAAY6C,GA1HnD1D,EAAgBuE,IAAO,mDAAmDC,MAAK,SAACC,GAC9E,OAAOA,KASmB,SAAC7D,EAAmBC,GAChDb,EAAcwE,MAAK,SAAApE,GACjBO,EAAeP,EAASQ,EAAmBC,MAgH7C6D,CAAsB9D,EAAmBC,GA5CL,SAAC6C,GACrC1D,EAAcwE,MAAK,SAAApE,GACjBqD,EAAuBrD,EAASsD,MA2ClCiB,CAA8BjB,GAE9BK,KAgBWa,EAAe,SAACC,EAAOC,GAElC,OAAO,IAAI3D,KAAK2D,EAAMD,EAAO,IASlBE,EAAe,SAACF,EAAOC,GAGlC,OAAO,IAAI3D,KAAK2D,EAAMD,EAAQ,EAAG,ICzO7BG,EAAQ,IACRC,EAAS,IACTC,EAAkB,GAAlBA,EAA6B,GAA7BA,EAAsC,GAAtCA,EAAgD,GAElDC,EAAM,GACNC,EAAS,GAETC,EAAS,GACTC,EAAS,GAETC,EAAS,GACTC,EAAS,GAETC,EAAY,GACZC,EAAa,GAEbC,EAAO,GAmBLC,EAAwB,IAAI5E,IAhBV,CACtB,CAAC,OAAQ,CAAC,GAAI,IACd,CAAC,MAAO,CAAC,GAAI,IACb,CAAC,SAAU,CAAC,GAAI,IAChB,CAAC,SAAU,CAAC,GAAI,IAChB,CAAC,SAAU,CAAC,IAAK,MAYb6E,EAAuB,IAAI7E,IATV,CACrB,CAAC,OAAQ,CAAC,GAAI,IACd,CAAC,MAAO,CAAC,GAAI,IACb,CAAC,SAAU,CAAC,GAAI,IAChB,CAAC,SAAU,CAAC,GAAI,IAChB,CAAC,SAAU,CAAC,IAAK,MAME8E,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAuBRC,gBAAkB,WAGhBb,EAAMZ,IAAU,eACb0B,KAAK,QAASjB,GACdiB,KAAK,SAAUhB,GACfgB,KAAK,UAAW,CAAC,EAAG,EAAGjB,EAAOC,IAC9BgB,KAAK,sBAAuB,iBAC5BC,QAAQ,eAAe,GAE1Bd,EAASb,IAAU,WAChB0B,KAAK,QAASjB,GACdiB,KAAK,SAAU,IAGlBZ,EAASF,EAAIgB,OAAO,KACjBF,KAAK,QAAS,UACdA,KAAK,YAFC,uBAE4BhB,EAASC,EAFrC,MAKTI,EAASH,EAAIgB,OAAO,KACjBF,KAAK,QAAS,UACdA,KAAK,YAFC,oBAEyBf,EAFzB,SAIT,IAAMkB,EAAW,IAAIjF,KACrBiF,EAAShF,SAAS,EAAG,EAAG,EAAG,GAC3B,IAAMiF,EAAS,IAAIlF,KACnBkF,EAAOjF,SAAS,GAAI,GAAI,GAAI,IAG5BmE,EAAShB,MACN+B,OAAO,CAACF,EAAUC,IAClBE,MAAM,CAACrB,EAAcF,EAAQE,IAEhCM,EAASjB,MACNgC,MAAM,CAACrB,EAAaD,EAASC,IAGhC,IAAIsB,EAAOrB,EAAIgB,OAAO,QACnB/B,MAAM,SAAU,yBAChBA,MAAM,eAAgB,OACtBA,MAAM,mBAAoB,KAE7Be,EACGsB,GAAG,aAAa,SAAUC,GACzB,IAAIC,EAAQpC,IAAWmC,GACvBF,EAAKP,KAAK,KAAK,WAGb,IAAIxF,EAAI,IAAMkG,EAAM,GAAK,MAEzB,OADAlG,GAAK,IAAMkG,EAAM,GAAZ,WAAqB1B,EAASC,SAItCuB,GAAG,aAAa,WACfD,EAAKpC,MAAM,UAAW,OAEvBqC,GAAG,YAAY,WACdD,EAAKpC,MAAM,UAAW,MAI1Be,EAAIgB,OAAO,QACRF,KAAK,QAAS,WACdA,KAAK,cAAe,UACpBA,KAAK,YAHR,qBAGmCf,EAAeF,EAAQE,GAAiB,EAH3E,aAGiFD,EAASC,EAAe,EAHzG,MAIG0B,KAAK,0BAGRzB,EAAIgB,OAAO,QACRF,KAAK,QAAS,WACdA,KAAK,cAAe,UACpBA,KAAK,YAHR,oBAGkCf,EAAe,EAHjD,cAGwDA,EAAcD,EAASC,GAAgB,EAH/F,kBAIG0B,KAAK,QAGRnB,EAAYN,EAAIgB,OAAO,KACpBF,KAAK,YAAa,cACrBP,EAAaD,EAAUU,OAAO,KAGnBhB,EAAIgB,OAAO,QACnBA,OAAO,YACPF,KAAK,KAAM,QACXE,OAAO,QACPF,KAAK,QAASjB,EAAQE,EAAeA,GACrCe,KAAK,SAAUhB,EAASC,EAAcA,EAAe,IACrDe,KAAK,IAAKf,GACVe,KAAK,IAAKf,EAAc,GAE3BS,EAAOpB,MACJsC,YAAY,CAAC,EAAG,KAChBC,OAAO,CAAC,CAAC,EAAG,GAAI,CAAC9B,EAAQE,EAAeA,EAAeD,EAASC,EAAcA,KAC9E6B,gBAAgB,CAAC,CAAC,EAAG,GAAI,CAAC/B,EAAQE,EAAeA,EAAeD,EAASC,EAAcA,KAE1FC,EAAI6B,KAAKrB,GAAMqB,KAAKrB,EAAKsB,UAAW1C,MAvHnB,EA2HnB2C,OAAS,WAAgBC,EAAYC,GAAmB,IAA5CH,EAA2C,EAA3CA,UAEJI,EAAKJ,EAAUK,SAAS/B,GAAQgC,YAAYhD,KAC5CiD,EAAKP,EAAUQ,SAASjC,GAAQ+B,YAAYhD,KAGlDmB,EAAWO,KAAK,YAAagB,GAE7BvB,EACGgC,UAAU,UACVzB,KAAK,IAAKmB,EAAgBH,EAAUU,GAEvC,IAAMC,EAAQrD,IAAc8C,GACzBQ,MAAMtD,IAAYuD,MAAM,IACxBC,WAAWxD,IAAc,UAEtByD,EAAQzD,IAAYiD,GAE1BnC,EAAO2B,KAAKY,GACZtC,EAAO0B,KAAKgB,IA9IK,EAoJnBC,UAAY,WAAM,MAE8D,EAAKlC,MAA3EtB,EAFQ,EAERA,KAAMyD,EAFE,EAEFA,gBAAiBC,EAFf,EAEeA,mBAAoBC,EAFnC,EAEmCA,WAAYC,EAF/C,EAE+CA,WAOzDC,ED/LH,SAAwBC,EAAMF,GACnC,GAAmB,YAAfA,EAA0B,CAE5B,IAAMvD,EAAOyD,EAAK3G,cACZiD,EAAQ0D,EAAKxF,WACbyF,EAAW,IAAIrH,KAAK2D,EAAMD,EAAO,GAGvC,MADe,CADC,IAAI1D,KAAK2D,EAAMD,EAAQ,EAAG,GACjB2D,GAEpB,GAAmB,WAAfH,EAAyB,CAElC,IAAMvD,EAAOyD,EAAK3G,cACZ4G,EAAW,IAAIrH,KAAJ,cAAgB2D,IAC3B2D,EAAU,IAAItH,KAAJ,cAAgB2D,EAAO,IAGvC,OAFA2D,EAAQjF,QAAQiF,EAAQC,UAAY,GACrB,CAACD,EAASD,ICgLVG,CADKP,EACuBC,GAG3C7C,EAAOc,OAAOgC,GAGd,IAAIV,EAAQrD,IAAcgB,GACvBsC,MAAMtD,IAAYuD,MAAM,IACxBC,WAAWxD,IAAc,UAGxByD,EAAQzD,IAAYiB,GAExBH,EAAO2B,KAAKY,GACZtC,EAAO0B,KAAKgB,GAEZ,IAAMY,EAAanE,GAAe,GAElCU,EAAI0D,OAAO,oBAAoBC,SACN,IAArBF,EAAUlI,QAGZyE,EAAIgB,OAAO,QACRF,KAAK,QAAS,mBACdA,KAAK,cAAe,UACpBA,KAAK,YAHR,qBAGmCf,EAAeF,EAAQE,GAAiB,EAH3E,cAGkFD,EAASC,EAAeA,GAAe,EAHzH,MAIG0B,KAJH,sBAIuBwB,EAAWW,eAAe,UAAW,CAAElE,MAAO,OAAQC,KAAM,cAMrF,IAAIkE,EAAQtD,EAAWgC,UAAU,UAC9BjD,KAAKmE,GAAW,SAAAnI,GAAC,OAAIA,EAAES,qBAEtBiG,EAAa6B,EAAMC,QACpB9C,OAAO,KACPF,KAAK,QAAS,SAEjBkB,EAAW+B,MAAMF,GACd/C,KAAK,aAAa,SAAAxF,GAGjB,MAAO,aAAe,CAFb8E,EAAO9E,EAAEc,MACTiE,EAAO/E,EAAEU,OACe,OAGrC,IAAMgI,EAAiC,YAAfd,EAA4BzC,EAAwBC,EAEtEuD,EAAUD,EAAetG,IAAI,QAAQ,GACrCwG,EAASF,EAAetG,IAAI,QAAQ,GAG1CsE,EAAWhB,OAAO,UACfF,KAAK,IAAKoD,GACVjF,MAAM,UAAWgF,GACjB3C,GAAG,SAAS,SAAU6C,EAAG7I,GACxByH,EAAgBzH,EAAEyC,IAClBiF,EAAmB,CAAC1H,GAAI,aAI5BuI,EAAMO,OAAOT,SAEb,EAAKU,eAAeZ,GAEpBjD,EAAKc,GAAG,QAAQ,SAACC,GAAD,OAAW,EAAKQ,OAAOR,EAAOS,EAAYkC,OA9NzC,EAoOnBI,YAAc,WAAO,IAAD,EAC+B,EAAK1D,MAA9C2D,EADU,EACVA,aAAcC,EADJ,EACIA,WAEhBR,EAAiC,YAHrB,EACgBd,WAEkBzC,EAAwBC,EAEtEuD,EAAUD,EAAetG,IAAI8G,GAAY,GACzCN,EAASF,EAAetG,IAAI8G,GAAY,GACxCC,EAAgBT,EAAetG,IAAI,UAAU,GAC7CgH,EAAeV,EAAetG,IAAI,UAAU,GAC5CuE,EAAgB+B,EAAetG,IAAI,QAAQ,GAI7CmG,EAAQtD,EAAWgC,UAAU,UAC9BjD,KAAKiF,GAAc,SAAAjJ,GAAC,OAAIA,EAAES,qBAE7B8H,EAAMH,OAAO,UACV5C,KAAK,IAAKoD,GACVjF,MAAM,UAAWgF,GAGpBJ,EAAMO,OACHV,OAAO,UACP5C,KAAK,IAAK4D,GACVzF,MAAM,UAAWwF,GAEpB,EAAKJ,eAAeE,GAEpB/D,EAAKc,GAAG,QAAQ,SAACC,GAAD,OAAW,EAAKQ,OAAOR,EAAOsC,EAAMC,QAAS7B,OAhQ5C,EAuQnBoC,eAAiB,SAAC/E,GAChB,IAAMqF,EAAS1E,EAAO2E,OAAO/E,MACvBgF,EAAU5E,EAAO2E,OAAO9E,OAG1BgF,EAAU7E,EAAO2E,OAAOG,WAAW,MAGvCD,EAAQE,UAAU,EAAG,EAAGL,EAAQE,GAKhC,IAHA,IACMI,EADQC,iBAAiBpG,SAASqG,MACtBC,iBAAiB,iBAE1BhK,EAAI,EAAGA,EAAIkE,EAAK/D,OAAQH,IAAK,CACpC,IAAIE,EAAIgE,EAAKlE,GAGb0J,EAAQO,UAAR,eAA4BJ,EAA5B,UACAH,EAAQQ,SAASlF,EAAO9E,EAAEc,MAAO,EAAG,EAAGyI,KAvRzC,EAAKU,MAAQ,GAFI,E,gEAOjBC,KAAK3E,oB,2CAIe2E,KAAK5E,MAAjB6E,QAGND,KAAK1C,YAGL0C,KAAKlB,gB,+BA6QP,OAAO,gCACL,wBAAQoB,GAAG,WACX,qBAAKA,GAAG,sB,GAjSqBC,IAAMC,WCvCpBC,E,kDACnB,WAAYjF,GAAQ,IAAD,8BACjB,cAAMA,IAMRkF,aAAe,SAACvE,GACd,EAAKwE,UAAS,iBAAO,CACnB/K,MAAOuG,EAAMyE,OAAOhL,WATL,EAanBiL,aAAe,SAAC1E,GACdA,EAAM2E,iBADkB,MAGsB,EAAKtF,MAA3CuF,EAHgB,EAGhBA,QAASnD,EAHO,EAGPA,mBAAoB1D,EAHb,EAGaA,KAErC0D,EADwBlI,EAAaqL,EAAS,EAAKZ,MAAMvK,MAAOsE,GAC5B,WAhBpC,EAAKiG,MAAQ,CACXvK,MAAO,IAHQ,E,qDAsBjB,OACE,uBAAMoL,SAAUZ,KAAKS,aAArB,UACE,uBACElL,KAAK,OACL2K,GAAG,eACHW,KAAMb,KAAK5E,MAAM0F,SACjBC,YAAY,gBACZC,SAAUhB,KAAKM,aACf9K,MAAOwK,KAAKD,MAAMvK,QAEpB,uBAAOD,KAAK,SAAS0L,UAAU,SAASf,GAAG,gBAAgB1K,MAAM,kB,GAjCjC2K,IAAMC,WCEzBc,E,kDACnB,WAAY9F,GAAQ,IAAD,8BACjB,cAAMA,IAKR+F,gBAAkB,SAAC5L,EAAMC,GAAW,IAAD,EACmB,EAAK4F,MAAjDoC,EADyB,EACzBA,mBAAoB4D,EADK,EACLA,cAAetH,EADV,EACUA,KAG3CsH,EAAc7L,GAIdiI,EADwBlI,EAAaC,EAAMC,EAAOsE,GACd,WAdnB,EAiBnBuH,kBAAoB,SAACC,GAAW,MAEqD,EAAKlG,MAAhFoC,EAFsB,EAEtBA,mBAAoBD,EAFE,EAEFA,gBAAiBgE,EAFf,EAEeA,aAAoBC,GAFnC,EAE6B1H,KAF7B,EAEmC0H,eAE3DC,EAAQF,EAAeD,EAEzBG,GAAS,GAAKA,EAAQD,EAAczL,SAEtCyH,EAAmB,CAACgE,EAAcC,IAAS,UAC3ClE,EAAgBkE,KAxBlB,EAAK1B,MAAQ,GAFI,E,qDA+BT,IAAD,SACmDC,KAAK5E,MAAvDmG,EADD,EACCA,aAAczH,EADf,EACeA,KAAM0H,EADrB,EACqBA,cAAe9D,EADpC,EACoCA,WAEvCjI,EAAUqE,OACD4H,IAAT5H,IAAoBrE,EAAU,IAElC,IAAI4I,EAAQmD,EAAcD,QACZG,IAAVrD,IAAqBA,EAAQ,IAEjC,IAEIsD,EACAC,EAHEC,OAA+BH,IAAjBrD,EAAMyD,OAAwB,SAAW,GAa7D,MARmB,YAAfpE,GACFiE,EAAuBtD,EAAMhG,QAAU5C,EAAQM,OAAS,EAAK,GAAK,iBAClE6L,EAAwBvD,EAAMhG,QAAU,EAAK,GAAK,kBAC1B,WAAfqF,IACTiE,EAAuBtD,EAAM/F,OAAS7C,EAAQM,OAAS,EAAK,GAAK,iBACjE6L,EAAwBvD,EAAM/F,OAAS,EAAK,GAAK,kBAIjD,sBAAK2I,UAAS,yBAAoBY,GAAlC,UACE,qBAAK3B,GAAG,YACN6B,IAAI,oFACN,sBAAKd,UAAU,OAAf,UACE,sBAAMA,UAAU,SAASe,QAAS,kBAAM,EAAKb,gBAAgB,SAAU9C,EAAMyD,SAA7E,SAAuFzD,EAAMyD,SAD/F,MAEY,sBAAMb,UAAU,OAAOe,QAAS,kBAAM,EAAKb,gBAAgB,OAAQ9C,EAAM4D,OAAzE,SAAiF5D,EAAM4D,UAEnG,qBAAKhB,UAAU,aAAae,QAAS,kBAAM,EAAKb,gBAAgB,QAAS9C,EAAM6D,QAA/E,SAAwF7D,EAAM6D,QAC9F,qBAAKjB,UAAU,YAAf,SAA6B5C,EAAM9H,kBAAqB8H,EAAM9H,kBAAkB6H,eAAe,UAAW,CAAE+D,QAAS,OAAQjI,MAAO,OAAQkI,IAAK,UAAWjI,KAAM,UAAWkI,KAAM,UAAWC,OAAQ,YAAe,KACrN,sBAAKrB,UAAU,cAAf,UACE,cAAC,IAAD,CAAiBsB,KAAMC,IACrBR,QAAS,kBAAM,EAAKX,kBAAkB,IACtCJ,UAAS,UAAKU,EAAL,UACTc,MAAM,qBAER,cAAC,IAAD,CAAiBF,KAAMG,IACrBV,QAAS,kBAAM,EAAKX,mBAAmB,IACvCJ,UAAS,UAAKW,EAAL,UACTnI,MAAO,CAAEkJ,WAAY,QACrBF,MAAM,gCAGV,qBAAKvC,GAAG,mB,GA7EsBC,IAAMC,WC0b7BwC,G,wDApbb,WAAYxH,GAAQ,IAAD,8BACjB,cAAMA,IA+BRnF,kBAAoB,SAAC4M,EAAQpN,EAASqN,GACpC,EAAKvC,UAAS,iBAAO,CACnBwC,eAAgBF,EAChBrB,cAAe/L,EACfqN,UAAWA,OApCI,EA6CnB5M,WAAa,SAACgE,EAAOC,GACnB,IAAI1E,EAAU,GADc,EAGW,EAAKsK,MAApCrC,EAHoB,EAGpBA,WAAYqF,EAHQ,EAGRA,eAED,YAAfrF,EACFjI,EAAUsN,EAAe7K,IAAIiC,GAAMD,GACX,WAAfwD,IAETjI,EAAUsN,EAAe7K,IAAIiC,GAAM/C,SAErC,EAAKmJ,UAAS,SAACyC,GAAD,MAAgB,CAC5BvN,QAASA,EACTwN,gBAAiBxN,EACjBuJ,WAAY,OACZkE,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,GAC1FvJ,MAAOA,EACPC,KAAMA,EACN8F,SAAS,EACTsB,cAAe,MACb,WACE,EAAKxB,MAAMtK,SACb,EAAKiO,kBAnEQ,EA4EnB3K,YAAc,SAAC4K,GACb,EAAKpD,UAAS,iBAAO,CACnBqD,SAAUD,OA9EK,EAqFnBD,YAAc,WACZ,IAAMG,EAAY,IAAIC,IAChBC,EAAU,IAAID,IACdE,EAAW,IAAIF,IAErB,EAAK/D,MAAMtK,QAAQwO,SAAQ,SAAAnO,GACzB+N,EAAUK,IAAIpO,EAAEgM,QAChBiC,EAAQG,IAAIpO,EAAEmM,MACd+B,EAASE,IAAIpO,EAAEoM,UAGjB,IAAMiC,EAAiB,SAACC,EAAGC,GACzB,OAAOD,EAAEE,cAAcC,cAAcF,EAAEC,gBAEnCE,EAAaC,MAAMC,KAAKb,GAAWc,KAAKR,GACxCS,EAAWH,MAAMC,KAAKX,GAASY,KAAKR,GACpCU,EAAYJ,MAAMC,KAAKV,GAAUW,KAAKR,GAE5C,EAAK5D,UAAS,iBAAO,CACnBO,SAAU,CAAEgE,OAAQN,EAAYO,KAAMH,EAAUI,MAAOH,GACvD5E,SAAS,OAzGM,EAiHnB1C,gBAAkB,SAAC2C,GACjB,EAAKK,UAAS,iBAAO,CACnBgB,aAAcrB,EACdlB,WAAY,SACZkE,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,QArH3E,EA8HnBjG,mBAAqB,SAAC/H,EAASwP,GAC7B,EAAK1E,UAAS,iBAAO,CACnB0C,gBAAiBxN,EACjBuJ,WAAYiG,EACZ/B,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,QAlI3E,EAyInByB,gBAAkB,WAChB,EAAK3E,UAAS,SAACyC,GAAD,MAAgB,CAC5BmC,aAAcnC,EAAUmC,iBA3IT,EAmJnB/D,cAAgB,SAAC7L,GACf,EAAKgL,UAAS,iBAAO,CACnB6E,gBAAiB7P,OArJF,EA6JnB8P,kBAAoB,SAACtJ,GACnB,IAAMuJ,EAAavJ,EAAMyE,OAAO+E,KAChC,EAAKhF,UAAS,SAACyC,GACb,MAAO,CACLE,UAAU,2BACLF,EAAUE,WADN,kBAENoC,GAActC,EAAUE,UAAUoC,KAErCtG,WAAY,UAEb,WACD,IAAMiE,EJ5Ha,SAACC,EAAWzN,GACnC,IAAI+P,EAAa,GAEXC,EAAW,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAElFC,EAAmB,EASvB,MAVmB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAGnDzB,SAAQ,SAAC7B,EAAKxM,GACnBsN,EAAUd,KACZoD,EAAaA,EAAWG,OAAOlQ,EAAQI,QAAO,SAAAC,GAAC,OAAIA,EAAEgB,MAAQ2O,EAAS7P,OACtE8P,QAIAA,EAAmB,EACdF,EAEA/P,EI2GmBmQ,CAAU,EAAK7F,MAAMmD,UAAW,EAAKnD,MAAMtK,SACnE,EAAK8K,UAAS,iBAAO,CACnB0C,gBAAiBA,UA1KJ,EA+KnB4C,iBAAmB,SAAC9J,GAClB,IACM+J,EADW/J,EAAMyE,OAAOuF,MACR,GAEhBC,EAAa,IAAIC,WASvBD,EAAWE,iBAAiB,QAPV,YJkBW,SAACpM,EAAM7D,EAAmBC,EAAY6C,GACrE/C,EAAe8D,EAAM7D,EAAmBC,GACxC4C,EAAuBgB,EAAMf,GAE7BK,IIlBI+M,CAHWvM,IAAYoM,EAAWI,QAAQ,SAAUtQ,GAClD,OAAOA,KAEe,EAAKG,kBAAmB,EAAKC,WAAY,EAAK6C,gBAGzB,GAC3C+M,GACFE,EAAWK,WAAWP,IA9LP,EAkMnBQ,cAAgB,SAACC,GACf,EAAKhG,UAAS,iBAAO,CACnB7C,WAAY6I,MACV,WACF,EAAKrQ,WAAW,EAAK6J,MAAM7F,MAAO,EAAK6F,MAAM5F,UApM/C,EAAK4F,MAAQ,CACXoF,aAAa,EACbpC,eAAgB,IAAI1M,IACpBZ,QAAS,GACT+L,cAAe,GACfyB,gBAAiB,GACjBjE,WAAY,OACZ4E,SAAU,GACV1J,MAAO,EACPC,KAAM,EACN2G,SAAU,CAAEgE,OAAQ,GAAIC,KAAM,GAAIC,MAAO,IACzCI,gBAAiB,SACjBlC,UAAW,CAAEC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,EAAOC,KAAK,GAC1FxD,SAAS,EACTsB,cAAe,EACf7D,WAAY,UACZoF,UAAW,IAlBI,E,gEAuBjBnJ,EAAMqG,KAAK/J,kBAAmB+J,KAAK9J,WAAY8J,KAAKjH,e,+BAmL5C,IAAD,SAKHiH,KAAKD,MAHPtK,EAFK,EAELA,QAASwN,EAFJ,EAEIA,gBAAiBzB,EAFrB,EAEqBA,cAAeV,EAFpC,EAEoCA,SAAUsE,EAF9C,EAE8CA,gBACnDlC,EAHK,EAGLA,UAAWlE,EAHN,EAGMA,WAAY9E,EAHlB,EAGkBA,MAAOC,EAHzB,EAGyBA,KAAMuD,EAH/B,EAG+BA,WAAYoF,EAH3C,EAG2CA,UAAWc,EAHtD,EAGsDA,SAAUrC,EAHhE,EAGgEA,aACrEtB,EAJK,EAILA,QAASkF,EAJJ,EAIIA,YAGE7L,SAASkN,qBAAqB,QAAQ,GAC9CvF,UAAakE,EAAe,GAAK,cAGtC,IAAMsB,EAAe,SAACrL,GACpB,OACE,sBAAK8E,GAAG,gBAAR,UACE,wBAAOwG,QAAQ,iBAAf,UACE,iCAAM,cAAC,IAAD,CAAiBnE,KAAMoE,MAA7B,iBACA,yBAAQzG,GAAG,gBAAgBc,SAAU,SAACjF,GAAD,OAAW,EAAKqF,cAAcrF,EAAMyE,OAAOhL,QAAQA,MAAO4P,EAA/F,UACE,wBAAQ5P,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,yBAGJ,uBACA,cAAC,EAAD,CACEmL,QAASyE,EACT5H,mBAAoB,EAAKA,mBACzB1D,KAAMrE,EACNqL,SAAQ,UAAKsE,EAAL,mBAMVwB,EAAY,SAACxL,GAAW,IACpByL,EAAuCzL,EAAvCyL,YAAaC,EAA0B1L,EAA1B0L,SAAUC,EAAgB3L,EAAhB2L,YAC/B,OACE,wBAAOL,QAASG,EAAhB,UACE,uBACEtR,KAAK,WACLgQ,KAAMsB,EACN3G,GAAI2G,EACJrR,MAAOsR,EACPE,QAAS9D,EAAU2D,GACnB7F,SAAU,EAAKqE,oBAEjB,sBAAMpE,UAAU,WAAhB,SAA4B8F,QAK5BE,EAAY,SAAC7L,GACjB,OACE,sBAAK8E,GAAG,cAAR,UACE,kCAAO,cAAC,IAAD,CAAiBqC,KAAM2E,MAA9B,iCACA,sBAAKhH,GAAG,gBAAR,UACE,cAAC0G,EAAD,CAAWC,YAAY,MAAMC,SAAS,SAASC,YAAY,QAC3D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,UAAUC,YAAY,QAC5D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,YAAYC,YAAY,QAC9D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,WAAWC,YAAY,QAC7D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,SAASC,YAAY,QAC3D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,WAAWC,YAAY,QAC7D,cAACH,EAAD,CAAWC,YAAY,MAAMC,SAAS,SAASC,YAAY,eAM7DI,EAAoB,SAACpL,GACzB,IAAMqL,EAAWC,SAAStL,EAAMyE,OAAOhL,OACvC,EAAKU,WAAWkR,EAAUjN,IAGtBmN,EAAmB,SAACvL,GACxB,IAAMwL,EAAUF,SAAStL,EAAMyE,OAAOhL,OACtC,EAAKU,WAAWgE,EAAOqN,IAyBnBC,EAAiB,SAACpM,GACtB,IAMIqM,EACAC,EANEC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IAE7CC,EAAgB3N,EAAaC,EAAOC,GACpC0N,EAAgBzN,EAAaF,EAAOC,GAc1C,MATmB,YAAfuD,GACF+J,EAAgBG,EAAgB9E,EAAU,GAAM,iBAAmB,GACnE4E,EAAgBG,EAAgB/E,EAAU,GAAM,iBAAmB,IAC3C,WAAfpF,IACT+J,GAA0D,IAA1C7D,EAASkE,QAAQT,SAASlN,GAAQ,IAAc,iBAChEuN,GAA0D,IAA1C9D,EAASkE,QAAQT,SAASlN,GAAQ,IAAc,kBAKhE,sBAAK8G,UAAU,kBAAf,UACE,cAAC,IAAD,CAAiBsB,KAAMwF,IAAW9G,UAAS,yBAAoByG,GAAgB1F,QAAS,kBAhC/D,SAACtE,GAC9B,GAAmB,YAAfA,EAA0B,CAC5B,IAAMmK,EAAgBzN,EAAaF,EAAOC,GACpC6N,EAAYH,EAAczP,WAAa,EACvC6P,EAAWJ,EAAc5Q,cAC/B,EAAKf,WAAW8R,EAAWC,OACH,WAAfvK,GACT,EAAKxH,WAAWgE,EAAOmN,SAASlN,GAAQ,GAyBwD+N,CAAuBxK,IACnH+E,MAAK,yBAAoC,YAAf/E,EAA4B,QAAU,UAElE,cAAC,IAAD,CAAiB6E,KAAM4F,IAAalH,UAAS,2BAAsBwG,GAAgBzF,QAAS,kBA9CnE,SAACtE,GAC9B,GAAmB,YAAfA,EAA0B,CAC5B,IAAMkK,EAAgB3N,EAAaC,EAAOC,GACpCiO,EAAYR,EAAcxP,WAAa,EACvCiQ,EAAgBT,EAAc3Q,cACpC,EAAKf,WAAWkS,EAAWC,OACH,WAAf3K,GACT,EAAKxH,WAAWgE,EAAOmN,SAASlN,GAAQ,GAuC4DmO,CAAuB5K,IACvH+E,MAAK,yBAAoC,YAAf/E,EAA4B,QAAU,UAEjD,YAAfA,GACA,wBAAQwC,GAAG,eAAec,SAAUmG,EAAmB3R,MAAO0E,EAA9D,SA3BS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YA4B9GqO,KAAI,SAACrO,EAAOtE,GAClB,OACE,wBAAQJ,MAAOmS,EAAO/R,GAAtB,SAA2BsE,SAKnC,wBAAQgG,GAAG,cAAcc,SAAUsG,EAAkB9R,MAAO2E,EAA5D,SACGyJ,EAAS2E,KAAI,SAACpO,GACb,OACE,wBAAQ3E,MAAO2E,EAAf,SAAsBA,aAQ5BqO,EAAmB,SAAC,GAAD,IAAGhT,EAAH,EAAGA,MAAH,OACvB,uBAAMyL,UAAU,qBAAhB,UACE,uBAAOf,GAAI1K,EAAOD,KAAK,QAAQC,MAAOA,EAAO+P,KAAK,cAAcyB,QAAStJ,IAAelI,EACtFwL,SAAU,kBAAM,EAAKsF,cAAc9Q,MAErC,uBAAOkR,QAASlR,EAAhB,SAAwBA,QAI5B,OACE,sBAAKyL,UAAU,iBAAf,UACE,sBAAKf,GAAG,UAAR,UACE,qBAAKe,UAAU,kBACf,+CAEF,sBAAKf,GAAG,oBAAR,UACE,sBAAKA,GAAG,yBAAyB8B,QAAShC,KAAKkF,gBAA/C,UACE,wBAAOwB,QAAQ,cAAczF,UAAU,qBAAvC,UACE,cAAC,IAAD,CAAiBsB,KAAMkG,MADzB,iBAGA,uBAAOvI,GAAG,cAAc3K,KAAK,OAAOmT,OAAO,OAAO1H,SAAUhB,KAAK6F,mBACjE,qBAAK5E,UAAU,qBAAf,SAEKkE,EACE,cAAC,IAAD,CAAiB5C,KAAMoG,MAEvB,cAAC,IAAD,CAAiBpG,KAAMqG,WAIhC,uDACA,sBAAK3H,UAAU,YAAf,UACE,cAACwF,EAAD,IACA,cAACQ,EAAD,IACA,yBAAQ/G,GAAG,QAAQe,UAAU,SAASe,QAAS,kBAAM,EAAK9L,WAAWgE,EAAOC,IAA5E,UAAmF,cAAC,IAAD,CAAiBoI,KAAMsG,IAAWC,KAAK,eAA1H,YACA,cAAC,EAAD,CACEvH,aAAcA,EACd/D,mBAAoBwC,KAAKxC,mBACzB4D,cAAepB,KAAKoB,cACpB7D,gBAAiByC,KAAKzC,gBACtBzD,KAAMrE,EACN+L,cAAeA,EACf9D,WAAYA,OAGhB,sBAAKuD,UAAU,gBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,cAACuH,EAAD,CAAkBhT,MAAM,YACxB,cAACgT,EAAD,CAAkBhT,MAAM,cAE1B,sBAAKyL,UAAU,iBAAf,UACE,sBAAKf,GAAG,UAAR,UAAoB+C,EAAmBA,EAAgBlN,OAAS,EAAhE,cACA,cAACyR,EAAD,UAGJ,qBAAKtH,GAAG,OAAR,SACE,cAAC,EAAD,CACEpG,KAAMrE,EACNsJ,aAAckE,EACdjE,WAAYA,EACZiB,QAASA,EACT1C,gBAAiByC,KAAKzC,gBACtBC,mBAAoBwC,KAAKxC,mBACzBC,WAAY,IAAIjH,KAAJ,UAAY0D,EAAZ,cAAuBC,IACnCuD,WAAYA,SAIlB,0BAAUwC,GAAG,kBAAb,SACGY,EAASgE,OAAOyD,KAAI,SAAAQ,GACnB,OAAO,iCAASA,SAGpB,0BAAU7I,GAAG,gBAAb,SACGY,EAASiE,KAAKwD,KAAI,SAAAQ,GACjB,OAAO,iCAASA,SAGpB,0BAAU7I,GAAG,iBAAb,SACGY,EAASkE,MAAMuD,KAAI,SAAAQ,GAClB,OAAO,iCAASA,gB,GA7aV5I,IAAMC,YCET4I,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrP,MAAK,YAAkD,IAA/CsP,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpQ,SAASC,eAAe,SAM1ByP,M","file":"static/js/main.48d9a0fc.chunk.js","sourcesContent":["import * as d3 from \"d3\";\r\n\r\nlet datasetLoaded = [];\r\n\r\n/**\r\n * Generates the yState for the month given a date in the month\r\n * @param {Date} date Date object whose date is in the month\r\n * @returns Array consisting of 2 elements: the last day and first day of the month\r\n */\r\nexport function generateYState(date, timePeriod) {\r\n  if (timePeriod === 'monthly') {\r\n    // get first day and last day of the month\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const yState = [lastDay, firstDay];\r\n    return yState;\r\n  } else if (timePeriod === 'yearly') {\r\n    // get first day and last day of the year\r\n    const year = date.getFullYear();\r\n    const firstDay = new Date(`1 1 ${year}`);\r\n    const lastDay = new Date(`1 1 ${year + 1}`);\r\n    lastDay.setDate(lastDay.getDate() - 1);\r\n    const yState = [lastDay, firstDay];\r\n    return yState;\r\n  } else {\r\n    // get first data point and last data point\r\n  }\r\n}\r\n\r\n/**\r\n * Handles filter functionality\r\n * @param {string} type the type of filter\r\n * @param {string} value the value to filter by\r\n * @param {array} dataset the data to filter\r\n * @returns the filtered dataset\r\n */\r\nexport function searchFilter(type, value, dataset) {\r\n  const settings = ['song', 'artist', 'album'];\r\n  const keys = ['Song', 'Artist', 'Album'];\r\n  for (let i = 0; i < settings.length; i++) {\r\n    if (type === settings[i]) {\r\n      return dataset.filter(d => d[keys[i]] === value);\r\n    }\r\n  }\r\n  // search type not found;\r\n  return [];\r\n}\r\n\r\n/**\r\n * Filters the current month's data by the given list of days\r\n * @param {Object} dayFilter\r\n * @param {Array} dataset\r\n */\r\nexport const filterDay = (dayFilter, dataset) => {\r\n  let newDataset = [];\r\n  // get the applied day filters from the object\r\n  const weekList = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n  const abbrevList = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\r\n  let daySelectedCount = 0;\r\n\r\n  abbrevList.forEach((day, i) => {\r\n    if (dayFilter[day]) {\r\n      newDataset = newDataset.concat(dataset.filter(d => d.Day === weekList[i]));\r\n      daySelectedCount++;\r\n    }\r\n  });\r\n  //if no days selected, display all\r\n  if (daySelectedCount > 0) {\r\n    return newDataset;\r\n  } else {\r\n    return dataset;\r\n  }\r\n}\r\n\r\n/**\r\n * Loads the music data from the csv\r\n */\r\nconst loadData = () => {\r\n  datasetLoaded = d3.csv('/Music-Listening-Times-v2.0/lastfm-data-utf.csv').then((data) => {\r\n    return data;\r\n  });\r\n}\r\n\r\n/**\r\n * Processes the data into buckets\r\n * @param {Function} setDatasetBuckets \r\n * @param {Function} setDataset\r\n */\r\nconst examplePreprocessData = (setDatasetBuckets, setDataset) => {\r\n  datasetLoaded.then(dataset => {\r\n    preprocessData(dataset, setDatasetBuckets, setDataset);\r\n  });\r\n}\r\n\r\n/**\r\n * Processes the data into buckets\r\n * @param {Function} setDatasetBuckets \r\n * @param {Function} setDataset\r\n */\r\nconst preprocessData = (dataset, setDatasetBuckets, setDataset) => {\r\n  //sorts all the data into buckets by the month and year\r\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n  const dataMap = new Map();\r\n\r\n  for (let i = 0; i < dataset.length; i++) {\r\n    const d = dataset[i];\r\n\r\n    // Some songs have blank RawDateTime's for some reason, skip these values\r\n    if (!d.RawDateTime) {\r\n      // remove the invalid data point from the dataset\r\n      dataset.splice(i, 1);\r\n      i--;\r\n      continue;\r\n    }\r\n\r\n    d.ConvertedDateTime = new Date(d.RawDateTime);\r\n\r\n    // minus 5 for BST -> EDT conversion\r\n    // This conversion will be off by an hour or so during times of daylight savings transition\r\n    // TODO: get user's timezone, allow user to input timezone to convert \r\n    d.ConvertedDateTime.setHours(d.ConvertedDateTime.getHours() - 5);\r\n    d.Date = new Date(d.ConvertedDateTime.toDateString());\r\n    d.Time = new Date().setHours(d.ConvertedDateTime.getHours(), d.ConvertedDateTime.getMinutes());\r\n    d.Day = days[d.ConvertedDateTime.getDay()];\r\n\r\n    const yearKey = (d.Date.getFullYear());\r\n    if (!dataMap.has(yearKey)) {\r\n      dataMap.set(yearKey, { yearArr: [], 1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [] });\r\n    }\r\n\r\n    const yearData = dataMap.get(yearKey);\r\n    const monthBucket = yearData[d.Date.getMonth() + 1];\r\n\r\n    d.monthID = monthBucket.length;\r\n    d.yearID = yearData.yearArr.length;\r\n    d.ID = i;\r\n\r\n    monthBucket.push(d);\r\n    yearData.yearArr.push(d);\r\n  }\r\n\r\n\r\n  const latestDate = new Date(`${dataset[0].Date.getMonth() + 2} 1 ${dataset[0].Date.getFullYear()}`);\r\n  const earliestDate = new Date(dataset[dataset.length - 1].Date);\r\n\r\n  latestDate.setHours(0, 0, 0, latestDate.getMilliseconds() - 1);\r\n  earliestDate.setDate(1);\r\n\r\n  setDatasetBuckets(dataMap, dataset, [earliestDate, latestDate]);\r\n\r\n  setDataset(latestDate.getMonth() + 1, latestDate.getFullYear());\r\n}\r\n\r\n/**\r\n * Initializes the date range (list of years)\r\n * @param {Function} setYearList Sets the year list to the given list\r\n */\r\nconst exampleYearListInitialization = (setYearList) => {\r\n  datasetLoaded.then(dataset => {\r\n    yearListInitialization(dataset, setYearList);\r\n  });\r\n}\r\n\r\n/**\r\n * Initializes the date range (list of years)\r\n * @param {Function} setYearList Sets the year list to the given list\r\n */\r\nconst yearListInitialization = (dataset, setYearList) => {\r\n  const latestYear = dataset[0].Date.getFullYear();\r\n  const earliestYear = dataset[dataset.length - 1].Date.getFullYear();\r\n\r\n  let currYear = latestYear;\r\n\r\n  let uniqueYears = [];\r\n  while (currYear >= earliestYear) {\r\n    uniqueYears.push(currYear);\r\n    currYear -= 1;\r\n  }\r\n  setYearList(uniqueYears);\r\n}\r\n\r\n/**\r\n * Hides the loading icon and shows the application\r\n */\r\nconst finishedLoading = () => {\r\n  //finished loading\r\n  const loading = document.getElementById('loading');\r\n  const content = document.getElementById('content-container');\r\n\r\n  loading.style.display = 'none';\r\n  content.style.display = 'block';\r\n}\r\n\r\n/**\r\n * Setup for the application\r\n * @param {Function} setDatasetBuckets \r\n * @param {Function} setDataset\r\n * @param {Function} setYearList \r\n */\r\nexport const setup = (setDatasetBuckets, setDataset, setYearList) => {\r\n  loadData();\r\n  examplePreprocessData(setDatasetBuckets, setDataset);\r\n  exampleYearListInitialization(setYearList);\r\n\r\n  finishedLoading();\r\n}\r\n\r\nexport const uploadedDataSetup = (data, setDatasetBuckets, setDataset, setYearList) => {\r\n  preprocessData(data, setDatasetBuckets, setDataset);\r\n  yearListInitialization(data, setYearList);\r\n\r\n  finishedLoading();\r\n}\r\n\r\n/**\r\n * Gets the next month\r\n * @param {number} month The numerical month you use normally (1 = Janurary, 12 = December)\r\n * @param {number} year The numerical full year (ex: 2021)\r\n * @returns Next month as a Date object\r\n */\r\nexport const getNextMonth = (month, year) => {\r\n  // dont need to \"add\" a month since the date object's month indexes from\r\n  return new Date(year, month, 1);\r\n}\r\n\r\n/**\r\n * Gets the previous month\r\n * @param {number} month The numerical month you use normally (1 = Janurary, 12 = December)\r\n * @param {number} year The numerical full year (ex: 2021)\r\n * @returns Previous month as a Date object\r\n */\r\nexport const getPrevMonth = (month, year) => {\r\n  // we subtract 1 for bc of month index from 0\r\n  // we subtract another 1 to get the prev month\r\n  return new Date(year, month - 2, 1);\r\n}","import React from 'react';\r\nimport * as d3 from \"d3\";\r\nimport { generateYState } from '../logic/chart';\r\n\r\nconst width = 950;\r\nconst height = 540;\r\nconst padding = { left: 90, right: 40, top: 10, down: 60 };\r\n\r\nlet svg = {};\r\nlet canvas = {};\r\n\r\nlet xAxisG = {};\r\nlet yAxisG = {};\r\n\r\nlet xScale = {};\r\nlet yScale = {};\r\n\r\nlet clipGroup = {};\r\nlet pointGroup = {};\r\n\r\nlet zoom = {};\r\n\r\n// opacity, radius\r\nconst monthlySettings = [\r\n  ['none', [.3, 3]],\r\n  ['day', [.3, 3]],\r\n  ['search', [.5, 5]],\r\n  ['select', [.7, 7]],\r\n  ['hidden', [.05, 3]],\r\n]\r\n\r\nconst yearlySettings = [\r\n  ['none', [.3, 2]],\r\n  ['day', [.3, 2]],\r\n  ['search', [.4, 3]],\r\n  ['select', [.7, 7]],\r\n  ['hidden', [.03, 2]],\r\n]\r\n\r\nconst monthlyCircleSettings = new Map(monthlySettings);\r\nconst yearlyCircleSettings = new Map(yearlySettings);\r\n\r\nexport default class Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initializeGraph();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { newLoad } = this.props;\r\n    if (newLoad) {\r\n      // brand new month data load\r\n      this.drawGraph();\r\n    } else {\r\n      // updating the current month data with a filter/reset\r\n      this.updateGraph();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the graph for the first time application load\r\n   */\r\n  initializeGraph = () => {\r\n    // GENERATE ELEMENTS \r\n    //Where to add the graph to\r\n    svg = d3.select('#main-graph')\r\n      .attr('width', width)\r\n      .attr('height', height)\r\n      .attr('viewBox', [0, 0, width, height])\r\n      .attr('preserveAspectRatio', 'xMidYMid meet')\r\n      .classed('svg-content', true);\r\n\r\n    canvas = d3.select('#canvas')\r\n      .attr('width', width)\r\n      .attr('height', 45);\r\n\r\n    //append x-axis\r\n    xAxisG = svg.append('g')\r\n      .attr('class', 'x axis')\r\n      .attr('transform', `translate(0, ${height - padding.down})`);\r\n\r\n    //append y-axis\r\n    yAxisG = svg.append('g')\r\n      .attr('class', 'y axis')\r\n      .attr('transform', `translate(${padding.left}, 0)`);\r\n\r\n    const startDay = new Date();\r\n    startDay.setHours(0, 0, 0, 0);\r\n    const endDay = new Date();\r\n    endDay.setHours(23, 59, 59, 59);\r\n\r\n    // x-axis scaled - time from 00:00 - 23:59:59\r\n    xScale = d3.scaleTime()\r\n      .domain([startDay, endDay])\r\n      .range([padding.left, width - padding.right]);\r\n\r\n    yScale = d3.scaleTime()\r\n      .range([padding.top, height - padding.down]);\r\n\r\n    //cursor position vertical line\r\n    let line = svg.append('path')\r\n      .style('stroke', 'var(--secondary-color')\r\n      .style('stroke-width', '3px')\r\n      .style('stroke-dasharray', '4');\r\n\r\n    svg\r\n      .on('mousemove', function (event) {\r\n        let mouse = d3.pointer(event);\r\n        line.attr('d', function () {\r\n          //d = 'M100,0 L100,460\r\n          //move to 100,460 then line to 100,0\r\n          let d = 'M' + mouse[0] + ',0 ';\r\n          d += 'L' + mouse[0] + `,${height - padding.down}`;\r\n          return d;\r\n        });\r\n      })\r\n      .on('mouseover', function () {\r\n        line.style('opacity', .4)\r\n      })\r\n      .on('mouseout', function () {\r\n        line.style('opacity', 0);\r\n      });\r\n\r\n    //append x-axis label\r\n    svg.append('text')\r\n      .attr('class', 'x label')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('transform', `translate(${(padding.left + width - padding.right) / 2}, ${height - padding.down / 4})`)\r\n      .text('Time of Day (hrs:mins)');\r\n\r\n    //append y-axis label\r\n    svg.append('text')\r\n      .attr('class', 'x label')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('transform', `translate(${padding.left / 4}, ${(padding.top + height - padding.down) / 2}) rotate(-90)`)\r\n      .text('Date');\r\n\r\n    // point group\r\n    clipGroup = svg.append('g')\r\n      .attr(\"clip-path\", \"url(#clip)\");\r\n    pointGroup = clipGroup.append('g');\r\n\r\n    // Add a clipPath: everything out of this area won't be drawn.\r\n    var clip = svg.append(\"defs\")\r\n      .append(\"clipPath\")\r\n      .attr(\"id\", \"clip\")\r\n      .append(\"rect\")\r\n      .attr(\"width\", width - padding.left - padding.right)\r\n      .attr(\"height\", height - padding.top - padding.down + 14)\r\n      .attr(\"x\", padding.left)\r\n      .attr(\"y\", padding.top - 7);\r\n\r\n    zoom = d3.zoom()\r\n      .scaleExtent([1, 10])\r\n      .extent([[0, 0], [width - padding.left - padding.right, height - padding.top - padding.down]])\r\n      .translateExtent([[0, 0], [width - padding.left - padding.right, height - padding.top - padding.down]]);\r\n\r\n    svg.call(zoom).call(zoom.transform, d3.zoomIdentity);\r\n  }\r\n\r\n  // A function that updates the chart when the user zoom and thus new boundaries are available\r\n  zoomed = ({ transform }, pointEnter, defaultRadius) => {\r\n    // recover the new scale\r\n    const zx = transform.rescaleX(xScale).interpolate(d3.interpolateRound);\r\n    const zy = transform.rescaleY(yScale).interpolate(d3.interpolateRound);\r\n\r\n    // update circle position\r\n    pointGroup.attr('transform', transform);\r\n\r\n    pointGroup\r\n      .selectAll('circle')\r\n      .attr('r', defaultRadius / transform.k);\r\n\r\n    const xAxis = d3.axisBottom(zx)\r\n      .ticks(d3.timeHour.every(1))\r\n      .tickFormat(d3.timeFormat('%H:%M'));\r\n\r\n    const yAxis = d3.axisLeft(zy);\r\n\r\n    xAxisG.call(xAxis);\r\n    yAxisG.call(yAxis);\r\n  }\r\n\r\n  /**\r\n   * Draws the graph with new data (month change)\r\n   */\r\n  drawGraph = () => {\r\n    // OTHER INITIALIZATION\r\n    const { data, setClickedPoint, setFilteredDataset, sampleDate, timePeriod } = this.props;\r\n\r\n    // TODO: need to improve this\r\n    // initial state, loading icon\r\n    // empty state for when no data\r\n    // if (data) {\r\n    const dateInMonth = sampleDate;\r\n    const yState = generateYState(dateInMonth, timePeriod);\r\n\r\n    //y-axis scale    \r\n    yScale.domain(yState);\r\n\r\n    //x-axis line\r\n    var xAxis = d3.axisBottom(xScale)\r\n      .ticks(d3.timeHour.every(1))\r\n      .tickFormat(d3.timeFormat('%H:%M'));\r\n\r\n    //y-axis line\r\n    var yAxis = d3.axisLeft(yScale);\r\n\r\n    xAxisG.call(xAxis);\r\n    yAxisG.call(yAxis);\r\n\r\n    const inputData = (data) ? data : [];\r\n    // clear 'no data message'\r\n    svg.select('.no-data-message').remove();\r\n    if (inputData.length === 0) {\r\n      // genereate 'no data' text\r\n      //append x-axis label\r\n      svg.append('text')\r\n        .attr('class', 'no-data-message')\r\n        .attr('text-anchor', 'middle')\r\n        .attr('transform', `translate(${(padding.left + width - padding.right) / 2}, ${(height - padding.down - padding.top) / 2})`)\r\n        .text(`No data for ${sampleDate.toLocaleString('default', { month: 'long', year: 'numeric' })}`);\r\n    }\r\n\r\n    // RENDER CIRCLES\r\n    //filtered selection\r\n\r\n    var point = pointGroup.selectAll('.point')\r\n      .data(inputData, d => d.ConvertedDateTime);\r\n\r\n    var pointEnter = point.enter()\r\n      .append('g')\r\n      .attr('class', 'point');\r\n\r\n    pointEnter.merge(point)\r\n      .attr('transform', d => {\r\n        var tx = xScale(d.Time);\r\n        var ty = yScale(d.Date);\r\n        return 'translate(' + [tx, ty] + ')';\r\n      });\r\n\r\n    const circleSettings = (timePeriod === 'monthly') ? monthlyCircleSettings : yearlyCircleSettings;\r\n\r\n    const opacity = circleSettings.get('none')[0];\r\n    const radius = circleSettings.get('none')[1];\r\n\r\n    //add circle to group\r\n    pointEnter.append('circle')\r\n      .attr('r', radius)\r\n      .style('opacity', opacity)\r\n      .on(\"click\", function (e, d) {\r\n        setClickedPoint(d.ID);\r\n        setFilteredDataset([d], 'select');\r\n      });\r\n\r\n    //remove filtered out circles\r\n    point.exit().remove();\r\n\r\n    this.drawCanvasBars(inputData);\r\n\r\n    zoom.on(\"zoom\", (event) => this.zoomed(event, pointEnter, radius));\r\n  }\r\n\r\n  /**\r\n   * Updates the current data in the graph (same month, no month change. filter update)\r\n   */\r\n  updateGraph = () => {\r\n    const { filteredData, filterView, timePeriod } = this.props;\r\n\r\n    const circleSettings = (timePeriod === 'monthly') ? monthlyCircleSettings : yearlyCircleSettings;\r\n\r\n    const opacity = circleSettings.get(filterView)[0];\r\n    const radius = circleSettings.get(filterView)[1];\r\n    const hiddenOpacity = circleSettings.get('hidden')[0];\r\n    const hiddenRadius = circleSettings.get('hidden')[1];\r\n    const defaultRadius = circleSettings.get('none')[1];\r\n\r\n\r\n    //filtered selection\r\n    var point = pointGroup.selectAll('.point')\r\n      .data(filteredData, d => d.ConvertedDateTime);\r\n\r\n    point.select(\"circle\")\r\n      .attr('r', radius)\r\n      .style('opacity', opacity);\r\n\r\n    //remove filtered out circles\r\n    point.exit()\r\n      .select(\"circle\")\r\n      .attr('r', hiddenRadius)\r\n      .style('opacity', hiddenOpacity);\r\n\r\n    this.drawCanvasBars(filteredData);\r\n\r\n    zoom.on(\"zoom\", (event) => this.zoomed(event, point.enter(), defaultRadius));\r\n  }\r\n\r\n  /**\r\n   * Draws the vertical bars on the single axis time graph\r\n   * @param {Array} data The data to use for the graph\r\n   */\r\n  drawCanvasBars = (data) => {\r\n    const cWidth = canvas.node().width;\r\n    const cHeight = canvas.node().height;\r\n\r\n    //object with prop and methods used to render graphics in canvas element\r\n    let context = canvas.node().getContext('2d');\r\n\r\n    // clear canvas\r\n    context.clearRect(0, 0, cWidth, cHeight);\r\n\r\n    const style = getComputedStyle(document.body);\r\n    const rgb = style.getPropertyValue('--default-rgb');\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      let d = data[i];\r\n\r\n      //draw rect\r\n      context.fillStyle = `rgba(${rgb}, .01)`;\r\n      context.fillRect(xScale(d.Time), 0, 3, cHeight);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <canvas id=\"canvas\"></canvas>\r\n      <svg id=\"main-graph\"></svg>\r\n    </div>\r\n  }\r\n}","import React from 'react';\r\nimport { searchFilter } from '../logic/chart';\r\n\r\nexport default class SearchForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState(() => ({\r\n      value: event.target.value,\r\n    }));\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const { setting, setFilteredDataset, data } = this.props;\r\n    const filteredDataset = searchFilter(setting, this.state.value, data);\r\n    setFilteredDataset(filteredDataset, 'search');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          id=\"filter-input\"\r\n          list={this.props.datalist}\r\n          placeholder=\"Search for...\"\r\n          onChange={this.handleChange}\r\n          value={this.state.value}\r\n        />\r\n        <input type=\"submit\" className=\"button\" id=\"submit-button\" value=\"Search\" />\r\n      </form >\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { searchFilter } from '../logic/chart';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faLongArrowAltLeft, faLongArrowAltRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class SongInfo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  handleInfoClick = (type, value) => {\r\n    const { setFilteredDataset, setSearchType, data } = this.props;\r\n\r\n    // set the datalist setting to artist\r\n    setSearchType(type);\r\n\r\n    // filter the dataset\r\n    const filteredDataset = searchFilter(type, value, data);\r\n    setFilteredDataset(filteredDataset, 'search');\r\n  }\r\n\r\n  handlePointChange = (change) => {\r\n    // filterView is assumed to be in 'select'\r\n    const { setFilteredDataset, setClickedPoint, clickedPoint, data, entireDataset } = this.props;\r\n\r\n    const newID = clickedPoint + change;\r\n    // check if valid change, if out of range dont do anything\r\n    if (newID >= 0 && newID < entireDataset.length) {\r\n      // need to change filtereddatasetmonth \r\n      setFilteredDataset([entireDataset[newID]], 'select');\r\n      setClickedPoint(newID);\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const { clickedPoint, data, entireDataset, timePeriod } = this.props;\r\n\r\n    let dataset = data;\r\n    if (data === undefined) dataset = [];\r\n\r\n    let point = entireDataset[clickedPoint];\r\n    if (point === undefined) point = {};\r\n\r\n    const visibility = (point.Artist === undefined) ? 'hidden' : '';\r\n\r\n    let leftArrowVisibility;\r\n    let rightArrowVisibility;\r\n\r\n    if (timePeriod === 'monthly') {\r\n      leftArrowVisibility = (point.monthID < dataset.length - 1) ? '' : 'disabled-arrow';\r\n      rightArrowVisibility = (point.monthID > 0) ? '' : 'disabled-arrow';\r\n    } else if (timePeriod === 'yearly') {\r\n      leftArrowVisibility = (point.yearID < dataset.length - 1) ? '' : 'disabled-arrow';\r\n      rightArrowVisibility = (point.yearID > 0) ? '' : 'disabled-arrow';\r\n    }\r\n\r\n    return (\r\n      <div className={`song-info-grid ${visibility}`}>\r\n        <img id=\"album-art\"\r\n          src=\"https://lastfm.freetls.fastly.net/i/u/174s/2a96cbd8b46e442fc41c2b86b821562f.png\" />\r\n        <div className=\"info\">\r\n          <span className=\"artist\" onClick={() => this.handleInfoClick('artist', point.Artist)}>{point.Artist}\r\n          </span> - <span className=\"song\" onClick={() => this.handleInfoClick('song', point.Song)}>{point.Song}</span>\r\n        </div>\r\n        <div className=\"info album\" onClick={() => this.handleInfoClick('album', point.Album)}>{point.Album}</div>\r\n        <div className=\"info date\">{(point.ConvertedDateTime) ? point.ConvertedDateTime.toLocaleString('default', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' }) : ''}</div>\r\n        <div className=\"song-arrows\">\r\n          <FontAwesomeIcon icon={faLongArrowAltLeft}\r\n            onClick={() => this.handlePointChange(1)}\r\n            className={`${leftArrowVisibility} arrow`}\r\n            title=\"Go to next point\"\r\n          />\r\n          <FontAwesomeIcon icon={faLongArrowAltRight}\r\n            onClick={() => this.handlePointChange(-1)}\r\n            className={`${rightArrowVisibility} arrow`}\r\n            style={{ marginLeft: '10px' }}\r\n            title=\"Go to the previous point\"\r\n          />\r\n        </div>\r\n        <div id=\"tagList\">{ }</div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport * as d3 from \"d3\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSun, faMoon, faSearch, faFilter, faRedoAlt, faCaretUp, faCaretDown, faUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport Graph from './components/Graph';\r\nimport SearchForm from './components/SearchForm';\r\nimport SongInfo from './components/SongInfo';\r\nimport { setup, uploadedDataSetup, filterDay } from './logic/chart.js';\r\nimport { getNextMonth, getPrevMonth } from './logic/chart.js';\r\nimport './App.css';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isDarkTheme: false,\r\n      datasetBuckets: new Map(),\r\n      dataset: [],\r\n      entireDataset: [],\r\n      filteredDataset: [],\r\n      filterView: 'none',\r\n      yearList: [],\r\n      month: 0,\r\n      year: 0,\r\n      datalist: { artist: [], song: [], album: [] },\r\n      datalistSetting: 'artist',\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n      newLoad: false,\r\n      clickedPoint: -1,\r\n      timePeriod: 'monthly',\r\n      timeRange: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setup(this.setDatasetBuckets, this.setDataset, this.setYearList);\r\n  }\r\n\r\n  /**\r\n   * Initializes the datasetBuckets state\r\n   * @param {Object} bucket Object with attributes of data by month\r\n   * @param {Array} dataset The entire dataset\r\n   * @param {Array} timeRange the bounds of the entire dataset\r\n   */\r\n  setDatasetBuckets = (bucket, dataset, timeRange) => {\r\n    this.setState(() => ({\r\n      datasetBuckets: bucket,\r\n      entireDataset: dataset,\r\n      timeRange: timeRange,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the state to the given month and year\r\n   * @param {number} month The numerical month you use normally (1 = Janurary, 12 = December)\r\n   * @param {number} year The numerical full year (ex: 2021)\r\n   */\r\n  setDataset = (month, year) => {\r\n    let dataset = [];\r\n\r\n    const { timePeriod, datasetBuckets } = this.state;\r\n\r\n    if (timePeriod === 'monthly') {\r\n      dataset = datasetBuckets.get(year)[month];\r\n    } else if (timePeriod === 'yearly') {\r\n      // get dataset for the year\r\n      dataset = datasetBuckets.get(year).yearArr;\r\n    }\r\n    this.setState((prevState) => ({\r\n      dataset: dataset,\r\n      filteredDataset: dataset,\r\n      filterView: 'none',\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n      month: month,\r\n      year: year,\r\n      newLoad: true,\r\n      clickedPoint: -1,\r\n    }), () => {\r\n      if (this.state.dataset) {\r\n        this.setDatalist();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes the yearList state to use as select options\r\n   * @param {Array} years the list of years\r\n   */\r\n  setYearList = (years) => {\r\n    this.setState(() => ({\r\n      yearList: years,\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Sets the artist, song, and album datalist for the current month\r\n   */\r\n  setDatalist = () => {\r\n    const artistSet = new Set();\r\n    const songSet = new Set();\r\n    const albumSet = new Set();\r\n\r\n    this.state.dataset.forEach(d => {\r\n      artistSet.add(d.Artist);\r\n      songSet.add(d.Song);\r\n      albumSet.add(d.Album);\r\n    });\r\n\r\n    const ignoreCaseSort = (a, b) => {\r\n      return a.toLowerCase().localeCompare(b.toLowerCase());\r\n    };\r\n    const artistList = Array.from(artistSet).sort(ignoreCaseSort);\r\n    const songList = Array.from(songSet).sort(ignoreCaseSort);\r\n    const albumList = Array.from(albumSet).sort(ignoreCaseSort);\r\n\r\n    this.setState(() => ({\r\n      datalist: { artist: artistList, song: songList, album: albumList },\r\n      newLoad: false,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the state for clickedPoint to the given point id\r\n   * @param {number} id month point id\r\n   */\r\n  setClickedPoint = (id) => {\r\n    this.setState(() => ({\r\n      clickedPoint: id,\r\n      filterView: 'select',\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Not used for day filter\r\n   * @param {*} dataset \r\n   * @param {*} viewType \r\n   */\r\n  setFilteredDataset = (dataset, viewType) => {\r\n    this.setState(() => ({\r\n      filteredDataset: dataset,\r\n      filterView: viewType,\r\n      dayFilter: { mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, sun: false },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the application theme to the opposite theme\r\n   */\r\n  toggleDarkTheme = () => {\r\n    this.setState((prevState) => ({\r\n      isDarkTheme: !prevState.isDarkTheme,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sets the search type to the given parameter\r\n   * @param {String} type the search type to set to ('artist', 'song', 'album')\r\n   */\r\n  setSearchType = (type) => {\r\n    this.setState(() => ({\r\n      datalistSetting: type,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Handles the toggling of the day filter checkboxes\r\n   * @param {Object} event \r\n   */\r\n  toggleDayCheckbox = (event) => {\r\n    const toggledDay = event.target.name;\r\n    this.setState((prevState) => {\r\n      return {\r\n        dayFilter: {\r\n          ...prevState.dayFilter,\r\n          [toggledDay]: !prevState.dayFilter[toggledDay],\r\n        },\r\n        filterView: 'day',\r\n      };\r\n    }, () => {\r\n      const filteredDataset = filterDay(this.state.dayFilter, this.state.dataset);\r\n      this.setState(() => ({\r\n        filteredDataset: filteredDataset,\r\n      }));\r\n    });\r\n  }\r\n\r\n  handleFileUpload = (event) => {\r\n    const fileList = event.target.files;\r\n    const file = fileList[0];\r\n\r\n    const fileReader = new FileReader();\r\n\r\n    const parseFile = () => {\r\n      var data = d3.csvParse(fileReader.result, function (d) {\r\n        return d;\r\n      });\r\n      uploadedDataSetup(data, this.setDatasetBuckets, this.setDataset, this.setYearList);\r\n    }\r\n\r\n    fileReader.addEventListener(\"load\", parseFile, false);\r\n    if (file) {\r\n      fileReader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  setTimePeriod = (period) => {\r\n    this.setState(() => ({\r\n      timePeriod: period,\r\n    }), () => {\r\n      this.setDataset(this.state.month, this.state.year);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      dataset, filteredDataset, entireDataset, datalist, datalistSetting,\r\n      dayFilter, filterView, month, year, timePeriod, timeRange, yearList, clickedPoint,\r\n      newLoad, isDarkTheme,\r\n    } = this.state;\r\n\r\n    const body = document.getElementsByTagName('body')[0];\r\n    body.className = (isDarkTheme) ? '' : 'light-theme';\r\n\r\n\r\n    const SearchFilter = (props) => {\r\n      return (\r\n        <div id=\"search-filter\">\r\n          <label htmlFor=\"general-filter\">\r\n            <span><FontAwesomeIcon icon={faSearch} /> Search by </span>\r\n            <select id=\"filter-select\" onChange={(event) => this.setSearchType(event.target.value)} value={datalistSetting}>\r\n              <option value=\"artist\">Artist</option>\r\n              <option value=\"song\">Song</option>\r\n              <option value=\"album\">Album</option>\r\n            </select>\r\n          </label>\r\n          <br />\r\n          <SearchForm\r\n            setting={datalistSetting}\r\n            setFilteredDataset={this.setFilteredDataset}\r\n            data={dataset}\r\n            datalist={`${datalistSetting}-datalist`}\r\n          />\r\n        </div >\r\n      )\r\n    }\r\n\r\n    const DayButton = (props) => {\r\n      const { abbrevation, fullName, displayName } = props;\r\n      return (\r\n        <label htmlFor={abbrevation}>\r\n          <input\r\n            type=\"checkbox\"\r\n            name={abbrevation}\r\n            id={abbrevation}\r\n            value={fullName}\r\n            checked={dayFilter[abbrevation]}\r\n            onChange={this.toggleDayCheckbox}\r\n          />\r\n          <span className=\"checkbox\">{displayName}</span>\r\n        </label>\r\n      )\r\n    }\r\n\r\n    const DayFilter = (props) => {\r\n      return (\r\n        <div id=\"day-filters\">\r\n          <label><FontAwesomeIcon icon={faFilter} /> Filter by day of the week:</label>\r\n          <div id=\"day-container\">\r\n            <DayButton abbrevation=\"mon\" fullName=\"Monday\" displayName=\"Mon\" />\r\n            <DayButton abbrevation=\"tue\" fullName=\"Tuesday\" displayName=\"Tue\" />\r\n            <DayButton abbrevation=\"wed\" fullName=\"Wednesday\" displayName=\"Wed\" />\r\n            <DayButton abbrevation=\"thu\" fullName=\"Thursday\" displayName=\"Thu\" />\r\n            <DayButton abbrevation=\"fri\" fullName=\"Friday\" displayName=\"Fri\" />\r\n            <DayButton abbrevation=\"sat\" fullName=\"Saturday\" displayName=\"Sat\" />\r\n            <DayButton abbrevation=\"sun\" fullName=\"Sunday\" displayName=\"Sun\" />\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const handleMonthChange = (event) => {\r\n      const newMonth = parseInt(event.target.value);\r\n      this.setDataset(newMonth, year);\r\n    };\r\n\r\n    const handleYearChange = (event) => {\r\n      const newYear = parseInt(event.target.value);\r\n      this.setDataset(month, newYear);\r\n    }\r\n\r\n    const handleNextPeriodChange = (timePeriod) => {\r\n      if (timePeriod === 'monthly') {\r\n        const nextMonthDate = getNextMonth(month, year);\r\n        const nextMonth = nextMonthDate.getMonth() + 1;\r\n        const nextMonthYear = nextMonthDate.getFullYear();\r\n        this.setDataset(nextMonth, nextMonthYear);\r\n      } else if (timePeriod === 'yearly') {\r\n        this.setDataset(month, parseInt(year) + 1);\r\n      }\r\n    }\r\n\r\n    const handlePrevPeriodChange = (timePeriod) => {\r\n      if (timePeriod === 'monthly') {\r\n        const prevMonthDate = getPrevMonth(month, year);\r\n        const prevMonth = prevMonthDate.getMonth() + 1;\r\n        const prevYear = prevMonthDate.getFullYear();\r\n        this.setDataset(prevMonth, prevYear);\r\n      } else if (timePeriod === 'yearly') {\r\n        this.setDataset(month, parseInt(year) - 1);\r\n      }\r\n    }\r\n\r\n    const DateNavigation = (props) => {\r\n      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n      const abbrev = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\n      const nextMonthDate = getNextMonth(month, year);\r\n      const prevMonthDate = getPrevMonth(month, year);\r\n\r\n      let nextDisabled;\r\n      let prevDisabled;\r\n\r\n      if (timePeriod === 'monthly') {\r\n        nextDisabled = (nextMonthDate > timeRange[1]) ? 'disabled-arrow' : '';\r\n        prevDisabled = (prevMonthDate < timeRange[0]) ? 'disabled-arrow' : '';\r\n      } else if (timePeriod === 'yearly') {\r\n        nextDisabled = (yearList.indexOf(parseInt(year) + 1) === -1) && 'disabled-arrow';\r\n        prevDisabled = (yearList.indexOf(parseInt(year) - 1) === -1) && 'disabled-arrow';\r\n      }\r\n\r\n\r\n      return (\r\n        <div className=\"date-navigation\">\r\n          <FontAwesomeIcon icon={faCaretUp} className={`up-caret arrow ${prevDisabled}`} onClick={() => handlePrevPeriodChange(timePeriod)}\r\n            title={`Go to previous ${(timePeriod === 'monthly') ? 'month' : 'year'}`}\r\n          />\r\n          <FontAwesomeIcon icon={faCaretDown} className={`down-caret arrow ${nextDisabled}`} onClick={() => handleNextPeriodChange(timePeriod)}\r\n            title={`Go to the next ${(timePeriod === 'monthly') ? 'month' : 'year'}`}\r\n          />\r\n          {(timePeriod === 'monthly') && (\r\n            <select id=\"month-select\" onChange={handleMonthChange} value={month}>\r\n              {months.map((month, i) => {\r\n                return (\r\n                  <option value={abbrev[i]}>{month}</option>\r\n                )\r\n              })}\r\n            </select>\r\n          )}\r\n          <select id=\"year-select\" onChange={handleYearChange} value={year}>\r\n            {yearList.map((year) => {\r\n              return (\r\n                <option value={year}>{year}</option>\r\n              )\r\n            })}\r\n          </select>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const TimePeriodButton = ({ value }) => (\r\n      <span className=\"time-period-button\">\r\n        <input id={value} type=\"radio\" value={value} name=\"time-period\" checked={timePeriod === value}\r\n          onChange={() => this.setTimePeriod(value)}\r\n        />\r\n        <label htmlFor={value}>{value}</label>\r\n      </span>\r\n    )\r\n\r\n    return (\r\n      <div className=\"site-container\" >\r\n        <div id=\"loading\">\r\n          <div className=\"lds-dual-ring\"></div>\r\n          <h2>Loading...</h2>\r\n        </div>\r\n        <div id=\"content-container\">\r\n          <div id=\"side-options-container\" onClick={this.toggleDarkTheme}>\r\n            <label htmlFor=\"file-upload\" className=\"side-option button\">\r\n              <FontAwesomeIcon icon={faUpload} /> Import CSV\r\n            </label>\r\n            <input id=\"file-upload\" type=\"file\" accept=\".csv\" onChange={this.handleFileUpload}></input>\r\n            <div className=\"button side-option\">\r\n              {\r\n                (isDarkTheme) ?\r\n                  (<FontAwesomeIcon icon={faMoon} />)\r\n                  :\r\n                  (<FontAwesomeIcon icon={faSun} />)\r\n              }\r\n            </div>\r\n          </div>\r\n          <h1>Music Listening Times</h1>\r\n          <div className=\"info-grid\">\r\n            <SearchFilter />\r\n            <DayFilter />\r\n            <button id=\"reset\" className=\"button\" onClick={() => this.setDataset(month, year)}><FontAwesomeIcon icon={faRedoAlt} flip=\"horizontal\" /> Reset</button>\r\n            <SongInfo\r\n              clickedPoint={clickedPoint}\r\n              setFilteredDataset={this.setFilteredDataset}\r\n              setSearchType={this.setSearchType}\r\n              setClickedPoint={this.setClickedPoint}\r\n              data={dataset}\r\n              entireDataset={entireDataset}\r\n              timePeriod={timePeriod}\r\n            />\r\n          </div>\r\n          <div className=\"time-settings\">\r\n            <div className=\"time-period\">\r\n              <TimePeriodButton value=\"monthly\" />\r\n              <TimePeriodButton value=\"yearly\" />\r\n            </div>\r\n            <div className=\"side-container\">\r\n              <div id=\"entries\">{(filteredDataset) ? filteredDataset.length : 0} entries</div>\r\n              <DateNavigation />\r\n            </div>\r\n          </div>\r\n          <div id=\"main\">\r\n            <Graph\r\n              data={dataset}\r\n              filteredData={filteredDataset}\r\n              filterView={filterView}\r\n              newLoad={newLoad}\r\n              setClickedPoint={this.setClickedPoint}\r\n              setFilteredDataset={this.setFilteredDataset}\r\n              sampleDate={new Date(`${month} 1 ${year}`)}\r\n              timePeriod={timePeriod}\r\n            />\r\n          </div>\r\n        </div>\r\n        <datalist id=\"artist-datalist\">\r\n          {datalist.artist.map(option => {\r\n            return <option>{option}</option>\r\n          })}\r\n        </datalist>\r\n        <datalist id=\"song-datalist\">\r\n          {datalist.song.map(option => {\r\n            return <option>{option}</option>\r\n          })}\r\n        </datalist>\r\n        <datalist id=\"album-datalist\">\r\n          {datalist.album.map(option => {\r\n            return <option>{option}</option>\r\n          })}\r\n        </datalist>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}